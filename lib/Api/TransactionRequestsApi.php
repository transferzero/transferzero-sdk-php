<?php
/**
 * TransactionRequestsApi
 * PHP version 5
 *
 * @category Class
 * @package  TransferZero
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BitPesa Private API
 *
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TransferZero\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TransferZero\ApiException;
use TransferZero\Configuration;
use TransferZero\HeaderSelector;
use TransferZero\ObjectSerializer;

/**
 * TransactionRequestsApi Class Doc Comment
 *
 * @category Class
 * @package  TransferZero
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionRequestsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

     /**
     * @var string
     */
    const DIGEST = 'SHA512';

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Use the Authorization Signature in the request headers to validate the payload
     *
     * @param $url The full url including any query strings
     * @param $body The string received through the webhook callback url
     * @param $headers The request headers received by the webhook endpoint
     *
     * @return boolean
     */
    public function validateWebhookRequest($url, $body, $headers) {
        $requestNonce = $headers["Authorization-Nonce"];
        $requestSignature = $headers["Authorization-Signature"];
        $requestkey = $headers["Authorization-Key"];

        if (empty($requestNonce) || empty($requestSignature) || ($requestkey != $this->config->getApiKey())) {
            return false;
        }

        $headerSignature = $this->signRequest([
            $requestNonce,
            'POST',
            $url,
            $this->digestHash($body)
        ]);

        return ($headerSignature == $requestSignature);
    }

    /**
     * Operation addDocumentTransactionRequest
     *
     * Adding a document to a transaction request (deprecated)
     *
     * @param  string $transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @param  string $document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\DocumentResponse|\TransferZero\Model\DocumentResponse
     */
    public function addDocumentTransactionRequest($transaction_request_id, $document_id)
    {
        list($response) = $this->addDocumentTransactionRequestWithHttpInfo($transaction_request_id, $document_id);
        return $response;
    }

    /**
     * Operation addDocumentTransactionRequestWithHttpInfo
     *
     * Adding a document to a transaction request (deprecated)
     *
     * @param  string $transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @param  string $document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\DocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDocumentTransactionRequestWithHttpInfo($transaction_request_id, $document_id)
    {
        $returnType = '\TransferZero\Model\DocumentResponse';
        $request = $this->addDocumentTransactionRequestRequest($transaction_request_id, $document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\DocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\DocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addDocumentTransactionRequestAsync
     *
     * Adding a document to a transaction request (deprecated)
     *
     * @param  string $transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @param  string $document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDocumentTransactionRequestAsync($transaction_request_id, $document_id)
    {
        return $this->addDocumentTransactionRequestAsyncWithHttpInfo($transaction_request_id, $document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addDocumentTransactionRequestAsyncWithHttpInfo
     *
     * Adding a document to a transaction request (deprecated)
     *
     * @param  string $transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @param  string $document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDocumentTransactionRequestAsyncWithHttpInfo($transaction_request_id, $document_id)
    {
        $returnType = '\TransferZero\Model\DocumentResponse';
        $request = $this->addDocumentTransactionRequestRequest($transaction_request_id, $document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addDocumentTransactionRequest'
     *
     * @param  string $transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @param  string $document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addDocumentTransactionRequestRequest($transaction_request_id, $document_id)
    {
        // verify the required parameter 'transaction_request_id' is set
        if ($transaction_request_id === null || (is_array($transaction_request_id) && count($transaction_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_request_id when calling addDocumentTransactionRequest'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling addDocumentTransactionRequest'
            );
        }

        $resourcePath = '/transaction_requests/{Transaction Request ID}/add_document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_id !== null) {
            $queryParams['document_id'] = ObjectSerializer::toQueryValue($document_id);
        }

        // path params
        if ($transaction_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'Transaction Request ID' . '}',
                ObjectSerializer::toPathValue($transaction_request_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'POST';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelTransactionRequest
     *
     * Cancelling a transaction request
     *
     * @param  string $transaction_request_id ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60; (required)
     * @param  string $reason_cancellation Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60; (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionReqResponse|\TransferZero\Model\TransactionReqResponse
     */
    public function cancelTransactionRequest($transaction_request_id, $reason_cancellation)
    {
        list($response) = $this->cancelTransactionRequestWithHttpInfo($transaction_request_id, $reason_cancellation);
        return $response;
    }

    /**
     * Operation cancelTransactionRequestWithHttpInfo
     *
     * Cancelling a transaction request
     *
     * @param  string $transaction_request_id ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60; (required)
     * @param  string $reason_cancellation Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60; (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionReqResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelTransactionRequestWithHttpInfo($transaction_request_id, $reason_cancellation)
    {
        $returnType = '\TransferZero\Model\TransactionReqResponse';
        $request = $this->cancelTransactionRequestRequest($transaction_request_id, $reason_cancellation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionReqResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionReqResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelTransactionRequestAsync
     *
     * Cancelling a transaction request
     *
     * @param  string $transaction_request_id ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60; (required)
     * @param  string $reason_cancellation Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelTransactionRequestAsync($transaction_request_id, $reason_cancellation)
    {
        return $this->cancelTransactionRequestAsyncWithHttpInfo($transaction_request_id, $reason_cancellation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelTransactionRequestAsyncWithHttpInfo
     *
     * Cancelling a transaction request
     *
     * @param  string $transaction_request_id ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60; (required)
     * @param  string $reason_cancellation Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelTransactionRequestAsyncWithHttpInfo($transaction_request_id, $reason_cancellation)
    {
        $returnType = '\TransferZero\Model\TransactionReqResponse';
        $request = $this->cancelTransactionRequestRequest($transaction_request_id, $reason_cancellation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelTransactionRequest'
     *
     * @param  string $transaction_request_id ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60; (required)
     * @param  string $reason_cancellation Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelTransactionRequestRequest($transaction_request_id, $reason_cancellation)
    {
        // verify the required parameter 'transaction_request_id' is set
        if ($transaction_request_id === null || (is_array($transaction_request_id) && count($transaction_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_request_id when calling cancelTransactionRequest'
            );
        }
        // verify the required parameter 'reason_cancellation' is set
        if ($reason_cancellation === null || (is_array($reason_cancellation) && count($reason_cancellation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reason_cancellation when calling cancelTransactionRequest'
            );
        }

        $resourcePath = '/transaction_requests/{Transaction Request ID}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($reason_cancellation !== null) {
            $queryParams['reason_cancellation'] = ObjectSerializer::toQueryValue($reason_cancellation);
        }

        // path params
        if ($transaction_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'Transaction Request ID' . '}',
                ObjectSerializer::toPathValue($transaction_request_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'POST';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmTransactionRequest
     *
     * Confirming a transaction request
     *
     * @param  string $transaction_request_id ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60; (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionReqResponse|\TransferZero\Model\TransactionReqResponse
     */
    public function confirmTransactionRequest($transaction_request_id)
    {
        list($response) = $this->confirmTransactionRequestWithHttpInfo($transaction_request_id);
        return $response;
    }

    /**
     * Operation confirmTransactionRequestWithHttpInfo
     *
     * Confirming a transaction request
     *
     * @param  string $transaction_request_id ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60; (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionReqResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmTransactionRequestWithHttpInfo($transaction_request_id)
    {
        $returnType = '\TransferZero\Model\TransactionReqResponse';
        $request = $this->confirmTransactionRequestRequest($transaction_request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionReqResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionReqResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmTransactionRequestAsync
     *
     * Confirming a transaction request
     *
     * @param  string $transaction_request_id ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmTransactionRequestAsync($transaction_request_id)
    {
        return $this->confirmTransactionRequestAsyncWithHttpInfo($transaction_request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmTransactionRequestAsyncWithHttpInfo
     *
     * Confirming a transaction request
     *
     * @param  string $transaction_request_id ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmTransactionRequestAsyncWithHttpInfo($transaction_request_id)
    {
        $returnType = '\TransferZero\Model\TransactionReqResponse';
        $request = $this->confirmTransactionRequestRequest($transaction_request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmTransactionRequest'
     *
     * @param  string $transaction_request_id ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function confirmTransactionRequestRequest($transaction_request_id)
    {
        // verify the required parameter 'transaction_request_id' is set
        if ($transaction_request_id === null || (is_array($transaction_request_id) && count($transaction_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_request_id when calling confirmTransactionRequest'
            );
        }

        $resourcePath = '/transaction_requests/{Transaction Request ID}/confirm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transaction_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'Transaction Request ID' . '}',
                ObjectSerializer::toPathValue($transaction_request_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'POST';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionRequest
     *
     * Fetching a transaction request
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $transaction_request_id ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param  bool $versioned If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionReqResponse
     */
    public function getTransactionRequest($associative_array)
    {
        list($response) = $this->getTransactionRequestWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation getTransactionRequestWithHttpInfo
     *
     * Fetching a transaction request
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $transaction_request_id ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param  bool $versioned If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionReqResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionRequestWithHttpInfo($associative_array)
    {
        $returnType = '\TransferZero\Model\TransactionReqResponse';
        $request = $this->getTransactionRequestRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionReqResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionRequestAsync
     *
     * Fetching a transaction request
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $transaction_request_id ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param  bool $versioned If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionRequestAsync($associative_array)
    {
        return $this->getTransactionRequestAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionRequestAsyncWithHttpInfo
     *
     * Fetching a transaction request
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $transaction_request_id ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param  bool $versioned If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionRequestAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\TransferZero\Model\TransactionReqResponse';
        $request = $this->getTransactionRequestRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionRequest'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $transaction_request_id ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param  bool $versioned If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionRequestRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $transaction_request_id = array_key_exists('transaction_request_id', $associative_array) ? $associative_array['transaction_request_id'] : null;
        $versioned = array_key_exists('versioned', $associative_array) ? $associative_array['versioned'] : null;

        // verify the required parameter 'transaction_request_id' is set
        if ($transaction_request_id === null || (is_array($transaction_request_id) && count($transaction_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_request_id when calling getTransactionRequest'
            );
        }

        $resourcePath = '/transaction_requests/{Transaction Request ID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($versioned !== null) {
            $queryParams['versioned'] = ObjectSerializer::toQueryValue($versioned);
        }

        // path params
        if ($transaction_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'Transaction Request ID' . '}',
                ObjectSerializer::toPathValue($transaction_request_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'GET';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionRequests
     *
     * Listing transaction requests
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page The page number to request (defaults to 1) (optional)
     * @param  int $per The number of results to load per page (defaults to 10) (optional)
     * @param  string[] $state Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)
     * @param  string[] $currency Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)
     * @param  string $created_at_from Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)
     * @param  string $created_at_to Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param  string $amount_from Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)
     * @param  string $amount_to Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)
     * @param  string $sender_id Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)
     * @param  bool $versioned If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)
     * @param  string[] $tag Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)
     * @param  string[] $ids Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)
     * @param  string[] $included Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)
     * @param  string[] $excluded Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionReqListResponse
     */
    public function getTransactionRequests($associative_array)
    {
        list($response) = $this->getTransactionRequestsWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation getTransactionRequestsWithHttpInfo
     *
     * Listing transaction requests
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page The page number to request (defaults to 1) (optional)
     * @param  int $per The number of results to load per page (defaults to 10) (optional)
     * @param  string[] $state Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)
     * @param  string[] $currency Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)
     * @param  string $created_at_from Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)
     * @param  string $created_at_to Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param  string $amount_from Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)
     * @param  string $amount_to Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)
     * @param  string $sender_id Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)
     * @param  bool $versioned If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)
     * @param  string[] $tag Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)
     * @param  string[] $ids Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)
     * @param  string[] $included Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)
     * @param  string[] $excluded Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionReqListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionRequestsWithHttpInfo($associative_array)
    {
        $returnType = '\TransferZero\Model\TransactionReqListResponse';
        $request = $this->getTransactionRequestsRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionReqListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionRequestsAsync
     *
     * Listing transaction requests
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page The page number to request (defaults to 1) (optional)
     * @param  int $per The number of results to load per page (defaults to 10) (optional)
     * @param  string[] $state Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)
     * @param  string[] $currency Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)
     * @param  string $created_at_from Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)
     * @param  string $created_at_to Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param  string $amount_from Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)
     * @param  string $amount_to Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)
     * @param  string $sender_id Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)
     * @param  bool $versioned If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)
     * @param  string[] $tag Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)
     * @param  string[] $ids Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)
     * @param  string[] $included Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)
     * @param  string[] $excluded Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionRequestsAsync($associative_array)
    {
        return $this->getTransactionRequestsAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionRequestsAsyncWithHttpInfo
     *
     * Listing transaction requests
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page The page number to request (defaults to 1) (optional)
     * @param  int $per The number of results to load per page (defaults to 10) (optional)
     * @param  string[] $state Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)
     * @param  string[] $currency Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)
     * @param  string $created_at_from Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)
     * @param  string $created_at_to Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param  string $amount_from Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)
     * @param  string $amount_to Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)
     * @param  string $sender_id Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)
     * @param  bool $versioned If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)
     * @param  string[] $tag Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)
     * @param  string[] $ids Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)
     * @param  string[] $included Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)
     * @param  string[] $excluded Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionRequestsAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\TransferZero\Model\TransactionReqListResponse';
        $request = $this->getTransactionRequestsRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionRequests'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page The page number to request (defaults to 1) (optional)
     * @param  int $per The number of results to load per page (defaults to 10) (optional)
     * @param  string[] $state Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)
     * @param  string[] $currency Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)
     * @param  string $created_at_from Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)
     * @param  string $created_at_to Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param  string $amount_from Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)
     * @param  string $amount_to Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)
     * @param  string $sender_id Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)
     * @param  bool $versioned If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)
     * @param  string[] $tag Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)
     * @param  string[] $ids Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)
     * @param  string[] $included Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)
     * @param  string[] $excluded Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionRequestsRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $page = array_key_exists('page', $associative_array) ? $associative_array['page'] : null;
        $per = array_key_exists('per', $associative_array) ? $associative_array['per'] : null;
        $state = array_key_exists('state', $associative_array) ? $associative_array['state'] : null;
        $currency = array_key_exists('currency', $associative_array) ? $associative_array['currency'] : null;
        $created_at_from = array_key_exists('created_at_from', $associative_array) ? $associative_array['created_at_from'] : null;
        $created_at_to = array_key_exists('created_at_to', $associative_array) ? $associative_array['created_at_to'] : null;
        $amount_from = array_key_exists('amount_from', $associative_array) ? $associative_array['amount_from'] : null;
        $amount_to = array_key_exists('amount_to', $associative_array) ? $associative_array['amount_to'] : null;
        $sender_id = array_key_exists('sender_id', $associative_array) ? $associative_array['sender_id'] : null;
        $versioned = array_key_exists('versioned', $associative_array) ? $associative_array['versioned'] : null;
        $tag = array_key_exists('tag', $associative_array) ? $associative_array['tag'] : null;
        $ids = array_key_exists('ids', $associative_array) ? $associative_array['ids'] : null;
        $included = array_key_exists('included', $associative_array) ? $associative_array['included'] : null;
        $excluded = array_key_exists('excluded', $associative_array) ? $associative_array['excluded'] : null;


        $resourcePath = '/transaction_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($per !== null) {
            $queryParams['per'] = ObjectSerializer::toQueryValue($per);
        }
        // query params
        if (is_array($state)) {
            $state = ObjectSerializer::serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if (is_array($currency)) {
            $currency = ObjectSerializer::serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = ObjectSerializer::toQueryValue($currency);
        }
        // query params
        if ($created_at_from !== null) {
            $queryParams['created_at_from'] = ObjectSerializer::toQueryValue($created_at_from);
        }
        // query params
        if ($created_at_to !== null) {
            $queryParams['created_at_to'] = ObjectSerializer::toQueryValue($created_at_to);
        }
        // query params
        if ($amount_from !== null) {
            $queryParams['amount_from'] = ObjectSerializer::toQueryValue($amount_from);
        }
        // query params
        if ($amount_to !== null) {
            $queryParams['amount_to'] = ObjectSerializer::toQueryValue($amount_to);
        }
        // query params
        if ($sender_id !== null) {
            $queryParams['sender_id'] = ObjectSerializer::toQueryValue($sender_id);
        }
        // query params
        if ($versioned !== null) {
            $queryParams['versioned'] = ObjectSerializer::toQueryValue($versioned);
        }
        // query params
        if (is_array($tag)) {
            $tag = ObjectSerializer::serializeCollection($tag, 'multi', true);
        }
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag);
        }
        // query params
        if (is_array($ids)) {
            $ids = ObjectSerializer::serializeCollection($ids, 'multi', true);
        }
        if ($ids !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($ids);
        }
        // query params
        if (is_array($included)) {
            $included = ObjectSerializer::serializeCollection($included, 'multi', true);
        }
        if ($included !== null) {
            $queryParams['included'] = ObjectSerializer::toQueryValue($included);
        }
        // query params
        if (is_array($excluded)) {
            $excluded = ObjectSerializer::serializeCollection($excluded, 'multi', true);
        }
        if ($excluded !== null) {
            $queryParams['excluded'] = ObjectSerializer::toQueryValue($excluded);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'GET';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postTransactionRequest
     *
     * Creating a transaction request
     *
     * @param  \TransferZero\Model\TransactionReqRequest $transaction_req_request transaction_req_request (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionReqResponse|\TransferZero\Model\TransactionReqResponse
     */
    public function postTransactionRequest($transaction_req_request)
    {
        list($response) = $this->postTransactionRequestWithHttpInfo($transaction_req_request);
        return $response;
    }

    /**
     * Operation postTransactionRequestWithHttpInfo
     *
     * Creating a transaction request
     *
     * @param  \TransferZero\Model\TransactionReqRequest $transaction_req_request (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionReqResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postTransactionRequestWithHttpInfo($transaction_req_request)
    {
        $returnType = '\TransferZero\Model\TransactionReqResponse';
        $request = $this->postTransactionRequestRequest($transaction_req_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionReqResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionReqResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postTransactionRequestAsync
     *
     * Creating a transaction request
     *
     * @param  \TransferZero\Model\TransactionReqRequest $transaction_req_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTransactionRequestAsync($transaction_req_request)
    {
        return $this->postTransactionRequestAsyncWithHttpInfo($transaction_req_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postTransactionRequestAsyncWithHttpInfo
     *
     * Creating a transaction request
     *
     * @param  \TransferZero\Model\TransactionReqRequest $transaction_req_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTransactionRequestAsyncWithHttpInfo($transaction_req_request)
    {
        $returnType = '\TransferZero\Model\TransactionReqResponse';
        $request = $this->postTransactionRequestRequest($transaction_req_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postTransactionRequest'
     *
     * @param  \TransferZero\Model\TransactionReqRequest $transaction_req_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postTransactionRequestRequest($transaction_req_request)
    {
        // verify the required parameter 'transaction_req_request' is set
        if ($transaction_req_request === null || (is_array($transaction_req_request) && count($transaction_req_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_req_request when calling postTransactionRequest'
            );
        }

        $resourcePath = '/transaction_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($transaction_req_request)) {
            $_tempBody = $transaction_req_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'POST';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restfulAddDocumentTransactionRequest
     *
     * Adding a document to a transaction request
     *
     * @param  string $transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param  string $document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\DocumentResponse|\TransferZero\Model\DocumentResponse
     */
    public function restfulAddDocumentTransactionRequest($transaction_request_id, $document_id)
    {
        list($response) = $this->restfulAddDocumentTransactionRequestWithHttpInfo($transaction_request_id, $document_id);
        return $response;
    }

    /**
     * Operation restfulAddDocumentTransactionRequestWithHttpInfo
     *
     * Adding a document to a transaction request
     *
     * @param  string $transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param  string $document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\DocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restfulAddDocumentTransactionRequestWithHttpInfo($transaction_request_id, $document_id)
    {
        $returnType = '\TransferZero\Model\DocumentResponse';
        $request = $this->restfulAddDocumentTransactionRequestRequest($transaction_request_id, $document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\DocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\DocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restfulAddDocumentTransactionRequestAsync
     *
     * Adding a document to a transaction request
     *
     * @param  string $transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param  string $document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulAddDocumentTransactionRequestAsync($transaction_request_id, $document_id)
    {
        return $this->restfulAddDocumentTransactionRequestAsyncWithHttpInfo($transaction_request_id, $document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restfulAddDocumentTransactionRequestAsyncWithHttpInfo
     *
     * Adding a document to a transaction request
     *
     * @param  string $transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param  string $document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulAddDocumentTransactionRequestAsyncWithHttpInfo($transaction_request_id, $document_id)
    {
        $returnType = '\TransferZero\Model\DocumentResponse';
        $request = $this->restfulAddDocumentTransactionRequestRequest($transaction_request_id, $document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restfulAddDocumentTransactionRequest'
     *
     * @param  string $transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param  string $document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restfulAddDocumentTransactionRequestRequest($transaction_request_id, $document_id)
    {
        // verify the required parameter 'transaction_request_id' is set
        if ($transaction_request_id === null || (is_array($transaction_request_id) && count($transaction_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_request_id when calling restfulAddDocumentTransactionRequest'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling restfulAddDocumentTransactionRequest'
            );
        }

        $resourcePath = '/transaction_requests/{Transaction Request ID}/documents/{Document ID}/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transaction_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'Transaction Request ID' . '}',
                ObjectSerializer::toPathValue($transaction_request_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'Document ID' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'POST';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionRequestLimits
     *
     * Specifies the limits for transaction requests
     *
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionReqLimitsResponse
     */
    public function transactionRequestLimits()
    {
        list($response) = $this->transactionRequestLimitsWithHttpInfo();
        return $response;
    }

    /**
     * Operation transactionRequestLimitsWithHttpInfo
     *
     * Specifies the limits for transaction requests
     *
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionReqLimitsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionRequestLimitsWithHttpInfo()
    {
        $returnType = '\TransferZero\Model\TransactionReqLimitsResponse';
        $request = $this->transactionRequestLimitsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionReqLimitsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionRequestLimitsAsync
     *
     * Specifies the limits for transaction requests
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionRequestLimitsAsync()
    {
        return $this->transactionRequestLimitsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionRequestLimitsAsyncWithHttpInfo
     *
     * Specifies the limits for transaction requests
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionRequestLimitsAsyncWithHttpInfo()
    {
        $returnType = '\TransferZero\Model\TransactionReqLimitsResponse';
        $request = $this->transactionRequestLimitsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionRequestLimits'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function transactionRequestLimitsRequest()
    {

        $resourcePath = '/transaction_requests/limits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'GET';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateTransactionRequests
     *
     * Validates a transaction request payload
     *
     * @param  \TransferZero\Model\TransactionReqRequest $transaction_req_request transaction_req_request (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionReqResponse|\TransferZero\Model\TransactionReqResponse
     */
    public function validateTransactionRequests($transaction_req_request)
    {
        list($response) = $this->validateTransactionRequestsWithHttpInfo($transaction_req_request);
        return $response;
    }

    /**
     * Operation validateTransactionRequestsWithHttpInfo
     *
     * Validates a transaction request payload
     *
     * @param  \TransferZero\Model\TransactionReqRequest $transaction_req_request (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionReqResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateTransactionRequestsWithHttpInfo($transaction_req_request)
    {
        $returnType = '\TransferZero\Model\TransactionReqResponse';
        $request = $this->validateTransactionRequestsRequest($transaction_req_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionReqResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionReqResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateTransactionRequestsAsync
     *
     * Validates a transaction request payload
     *
     * @param  \TransferZero\Model\TransactionReqRequest $transaction_req_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateTransactionRequestsAsync($transaction_req_request)
    {
        return $this->validateTransactionRequestsAsyncWithHttpInfo($transaction_req_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateTransactionRequestsAsyncWithHttpInfo
     *
     * Validates a transaction request payload
     *
     * @param  \TransferZero\Model\TransactionReqRequest $transaction_req_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateTransactionRequestsAsyncWithHttpInfo($transaction_req_request)
    {
        $returnType = '\TransferZero\Model\TransactionReqResponse';
        $request = $this->validateTransactionRequestsRequest($transaction_req_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateTransactionRequests'
     *
     * @param  \TransferZero\Model\TransactionReqRequest $transaction_req_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateTransactionRequestsRequest($transaction_req_request)
    {
        // verify the required parameter 'transaction_req_request' is set
        if ($transaction_req_request === null || (is_array($transaction_req_request) && count($transaction_req_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_req_request when calling validateTransactionRequests'
            );
        }

        $resourcePath = '/transaction_requests/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($transaction_req_request)) {
            $_tempBody = $transaction_req_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'POST';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        $options[RequestOptions::HTTP_ERRORS] = false;
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Parses and deserializes a response in string format.
     * Can be used to parse webhook responses that were already converted to strings
     *
     * @param object response the object we wish to parse
     * @param boolean returnType The type of the PHP object (true for array, false for object)
     *
     * @return object|array The deserialized PHP object
     * @throws ApiException If it fails to deserialize response body
     */
    public function parseResponseString($response, $returnType = null) {
        if (empty($response) || is_null($returnType )) {
            return null;
        }

        try {
            return ObjectSerializer::deserialize(
                $response,
                "\\TransferZero\\Model\\{$returnType}"
            );
        } catch (ApiException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }
    }

    /**
     * Sign request using HMAC-SHA512 algorithm
     *
     * @param array $params
     * @return string
     */
    protected function signRequest($params)
    {
        $to_sign = implode('&', $params);
        return hash_hmac(
            self::DIGEST,
            $to_sign,
            $this->config->getApiSecret()
        );
    }

    /**
     * Create a hash of the body content
     *
     * @param string $body
     * @return string
     */
    protected function digestHash($body)
    {
        return openssl_digest(trim($body), self::DIGEST);
    }

    /**
     * Generate a random nonce for authorization
     *
     * @return string
     */
    protected function guidv4Nonce()
    {
        if (function_exists('com_create_guid') === true) {
            return trim(com_create_guid(), '{}');
        }
        $data = openssl_random_pseudo_bytes(16);
        $data[6] = chr(ord($data[6]) & 0x0f | 0x40); // set version to 0100
        $data[8] = chr(ord($data[8]) & 0x3f | 0x80); // set bits 6-7 to 10
        return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));
    }
}

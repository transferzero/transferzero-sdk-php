<?php
/**
 * TransactionsApi
 * PHP version 5
 *
 * @category Class
 * @package  TransferZero
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TransferZero API
 *
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TransferZero\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TransferZero\ApiException;
use TransferZero\Configuration;
use TransferZero\HeaderSelector;
use TransferZero\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  TransferZero
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

     /**
     * @var string
     */
    const DIGEST = 'SHA512';

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Use the Authorization Signature in the request headers to validate the payload
     *
     * @param $url The full url including any query strings
     * @param $body The string received through the webhook callback url
     * @param $headers The request headers received by the webhook endpoint
     *
     * @return boolean
     */
    public function validateWebhookRequest($url, $body, $headers) {
        $requestNonce = $headers["Authorization-Nonce"];
        $requestSignature = $headers["Authorization-Signature"];
        $requestkey = $headers["Authorization-Key"];

        if (empty($requestNonce) || empty($requestSignature) || ($requestkey != $this->config->getApiKey())) {
            return false;
        }

        $headerSignature = $this->signRequest([
            $requestNonce,
            'POST',
            $url,
            $this->digestHash($body)
        ]);

        return ($headerSignature == $requestSignature);
    }

    /**
     * Operation calculateTransactions
     *
     * Calculates transaction amounts for a transaction payload
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request transaction_request (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionResponse
     */
    public function calculateTransactions($transaction_request)
    {
        list($response) = $this->calculateTransactionsWithHttpInfo($transaction_request);
        return $response;
    }

    /**
     * Operation calculateTransactionsWithHttpInfo
     *
     * Calculates transaction amounts for a transaction payload
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function calculateTransactionsWithHttpInfo($transaction_request)
    {
        $returnType = '\TransferZero\Model\TransactionResponse';
        $request = $this->calculateTransactionsRequest($transaction_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation calculateTransactionsAsync
     *
     * Calculates transaction amounts for a transaction payload
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function calculateTransactionsAsync($transaction_request)
    {
        return $this->calculateTransactionsAsyncWithHttpInfo($transaction_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation calculateTransactionsAsyncWithHttpInfo
     *
     * Calculates transaction amounts for a transaction payload
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function calculateTransactionsAsyncWithHttpInfo($transaction_request)
    {
        $returnType = '\TransferZero\Model\TransactionResponse';
        $request = $this->calculateTransactionsRequest($transaction_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'calculateTransactions'
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function calculateTransactionsRequest($transaction_request)
    {
        // verify the required parameter 'transaction_request' is set
        if ($transaction_request === null || (is_array($transaction_request) && count($transaction_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_request when calling calculateTransactions'
            );
        }

        $resourcePath = '/transactions/calculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($transaction_request)) {
            $_tempBody = $transaction_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'POST';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransaction
     *
     * Fetch a single transaction
     *
     * @param  string $transaction_id ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionResponse
     */
    public function getTransaction($transaction_id)
    {
        list($response) = $this->getTransactionWithHttpInfo($transaction_id);
        return $response;
    }

    /**
     * Operation getTransactionWithHttpInfo
     *
     * Fetch a single transaction
     *
     * @param  string $transaction_id ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionWithHttpInfo($transaction_id)
    {
        $returnType = '\TransferZero\Model\TransactionResponse';
        $request = $this->getTransactionRequest($transaction_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\ErrorStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionAsync
     *
     * Fetch a single transaction
     *
     * @param  string $transaction_id ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionAsync($transaction_id)
    {
        return $this->getTransactionAsyncWithHttpInfo($transaction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionAsyncWithHttpInfo
     *
     * Fetch a single transaction
     *
     * @param  string $transaction_id ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionAsyncWithHttpInfo($transaction_id)
    {
        $returnType = '\TransferZero\Model\TransactionResponse';
        $request = $this->getTransactionRequest($transaction_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransaction'
     *
     * @param  string $transaction_id ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionRequest($transaction_id)
    {
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling getTransaction'
            );
        }

        $resourcePath = '/transactions/{Transaction ID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'Transaction ID' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'GET';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactions
     *
     * Get a list of transactions
     *
     * @param  int $page The page number to request (defaults to 1) (optional)
     * @param  int $per The number of results to load per page (defaults to 10) (optional)
     * @param  string $external_id Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionListResponse
     */
    public function getTransactions($page = null, $per = null, $external_id = null)
    {
        list($response) = $this->getTransactionsWithHttpInfo($page, $per, $external_id);
        return $response;
    }

    /**
     * Operation getTransactionsWithHttpInfo
     *
     * Get a list of transactions
     *
     * @param  int $page The page number to request (defaults to 1) (optional)
     * @param  int $per The number of results to load per page (defaults to 10) (optional)
     * @param  string $external_id Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsWithHttpInfo($page = null, $per = null, $external_id = null)
    {
        $returnType = '\TransferZero\Model\TransactionListResponse';
        $request = $this->getTransactionsRequest($page, $per, $external_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\ErrorStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsAsync
     *
     * Get a list of transactions
     *
     * @param  int $page The page number to request (defaults to 1) (optional)
     * @param  int $per The number of results to load per page (defaults to 10) (optional)
     * @param  string $external_id Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsAsync($page = null, $per = null, $external_id = null)
    {
        return $this->getTransactionsAsyncWithHttpInfo($page, $per, $external_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsAsyncWithHttpInfo
     *
     * Get a list of transactions
     *
     * @param  int $page The page number to request (defaults to 1) (optional)
     * @param  int $per The number of results to load per page (defaults to 10) (optional)
     * @param  string $external_id Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsAsyncWithHttpInfo($page = null, $per = null, $external_id = null)
    {
        $returnType = '\TransferZero\Model\TransactionListResponse';
        $request = $this->getTransactionsRequest($page, $per, $external_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactions'
     *
     * @param  int $page The page number to request (defaults to 1) (optional)
     * @param  int $per The number of results to load per page (defaults to 10) (optional)
     * @param  string $external_id Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionsRequest($page = null, $per = null, $external_id = null)
    {

        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($per !== null) {
            $queryParams['per'] = ObjectSerializer::toQueryValue($per);
        }
        // query params
        if ($external_id !== null) {
            $queryParams['external_id'] = ObjectSerializer::toQueryValue($external_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'GET';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payinTransaction
     *
     * Creates a fake payin for transaction
     *
     * @param  string $transaction_id ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60; (required)
     * @param  \TransferZero\Model\PayinMethodRequest $payin_method_request payin_method_request (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionResponse
     */
    public function payinTransaction($transaction_id, $payin_method_request)
    {
        list($response) = $this->payinTransactionWithHttpInfo($transaction_id, $payin_method_request);
        return $response;
    }

    /**
     * Operation payinTransactionWithHttpInfo
     *
     * Creates a fake payin for transaction
     *
     * @param  string $transaction_id ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60; (required)
     * @param  \TransferZero\Model\PayinMethodRequest $payin_method_request (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payinTransactionWithHttpInfo($transaction_id, $payin_method_request)
    {
        $returnType = '\TransferZero\Model\TransactionResponse';
        $request = $this->payinTransactionRequest($transaction_id, $payin_method_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payinTransactionAsync
     *
     * Creates a fake payin for transaction
     *
     * @param  string $transaction_id ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60; (required)
     * @param  \TransferZero\Model\PayinMethodRequest $payin_method_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payinTransactionAsync($transaction_id, $payin_method_request)
    {
        return $this->payinTransactionAsyncWithHttpInfo($transaction_id, $payin_method_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payinTransactionAsyncWithHttpInfo
     *
     * Creates a fake payin for transaction
     *
     * @param  string $transaction_id ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60; (required)
     * @param  \TransferZero\Model\PayinMethodRequest $payin_method_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payinTransactionAsyncWithHttpInfo($transaction_id, $payin_method_request)
    {
        $returnType = '\TransferZero\Model\TransactionResponse';
        $request = $this->payinTransactionRequest($transaction_id, $payin_method_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payinTransaction'
     *
     * @param  string $transaction_id ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60; (required)
     * @param  \TransferZero\Model\PayinMethodRequest $payin_method_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payinTransactionRequest($transaction_id, $payin_method_request)
    {
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling payinTransaction'
            );
        }
        // verify the required parameter 'payin_method_request' is set
        if ($payin_method_request === null || (is_array($payin_method_request) && count($payin_method_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payin_method_request when calling payinTransaction'
            );
        }

        $resourcePath = '/transactions/{Transaction ID}/payin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'Transaction ID' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payin_method_request)) {
            $_tempBody = $payin_method_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'POST';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payoutTransaction
     *
     * Creates a fake payout for transaction
     *
     * @param  string $transaction_id ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60; (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionResponse
     */
    public function payoutTransaction($transaction_id)
    {
        list($response) = $this->payoutTransactionWithHttpInfo($transaction_id);
        return $response;
    }

    /**
     * Operation payoutTransactionWithHttpInfo
     *
     * Creates a fake payout for transaction
     *
     * @param  string $transaction_id ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60; (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payoutTransactionWithHttpInfo($transaction_id)
    {
        $returnType = '\TransferZero\Model\TransactionResponse';
        $request = $this->payoutTransactionRequest($transaction_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payoutTransactionAsync
     *
     * Creates a fake payout for transaction
     *
     * @param  string $transaction_id ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payoutTransactionAsync($transaction_id)
    {
        return $this->payoutTransactionAsyncWithHttpInfo($transaction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payoutTransactionAsyncWithHttpInfo
     *
     * Creates a fake payout for transaction
     *
     * @param  string $transaction_id ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payoutTransactionAsyncWithHttpInfo($transaction_id)
    {
        $returnType = '\TransferZero\Model\TransactionResponse';
        $request = $this->payoutTransactionRequest($transaction_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payoutTransaction'
     *
     * @param  string $transaction_id ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payoutTransactionRequest($transaction_id)
    {
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling payoutTransaction'
            );
        }

        $resourcePath = '/transactions/{Transaction ID}/payout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'Transaction ID' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'POST';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postTransactions
     *
     * Creates a new transaction
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request transaction_request (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionResponse
     */
    public function postTransactions($transaction_request)
    {
        list($response) = $this->postTransactionsWithHttpInfo($transaction_request);
        return $response;
    }

    /**
     * Operation postTransactionsWithHttpInfo
     *
     * Creates a new transaction
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postTransactionsWithHttpInfo($transaction_request)
    {
        $returnType = '\TransferZero\Model\TransactionResponse';
        $request = $this->postTransactionsRequest($transaction_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\ErrorStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postTransactionsAsync
     *
     * Creates a new transaction
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTransactionsAsync($transaction_request)
    {
        return $this->postTransactionsAsyncWithHttpInfo($transaction_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postTransactionsAsyncWithHttpInfo
     *
     * Creates a new transaction
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTransactionsAsyncWithHttpInfo($transaction_request)
    {
        $returnType = '\TransferZero\Model\TransactionResponse';
        $request = $this->postTransactionsRequest($transaction_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postTransactions'
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postTransactionsRequest($transaction_request)
    {
        // verify the required parameter 'transaction_request' is set
        if ($transaction_request === null || (is_array($transaction_request) && count($transaction_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_request when calling postTransactions'
            );
        }

        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($transaction_request)) {
            $_tempBody = $transaction_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'POST';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateTransactions
     *
     * Validates a transaction payload
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request transaction_request (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferZero\Model\TransactionResponse
     */
    public function validateTransactions($transaction_request)
    {
        list($response) = $this->validateTransactionsWithHttpInfo($transaction_request);
        return $response;
    }

    /**
     * Operation validateTransactionsWithHttpInfo
     *
     * Validates a transaction payload
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \TransferZero\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferZero\Model\TransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateTransactionsWithHttpInfo($transaction_request)
    {
        $returnType = '\TransferZero\Model\TransactionResponse';
        $request = $this->validateTransactionsRequest($transaction_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode == 422) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody(),
                    true
                );
            } elseif ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody()->getContents(),
                        '\TransferZero\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateTransactionsAsync
     *
     * Validates a transaction payload
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateTransactionsAsync($transaction_request)
    {
        return $this->validateTransactionsAsyncWithHttpInfo($transaction_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateTransactionsAsyncWithHttpInfo
     *
     * Validates a transaction payload
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateTransactionsAsyncWithHttpInfo($transaction_request)
    {
        $returnType = '\TransferZero\Model\TransactionResponse';
        $request = $this->validateTransactionsRequest($transaction_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateTransactions'
     *
     * @param  \TransferZero\Model\TransactionRequest $transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateTransactionsRequest($transaction_request)
    {
        // verify the required parameter 'transaction_request' is set
        if ($transaction_request === null || (is_array($transaction_request) && count($transaction_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_request when calling validateTransactions'
            );
        }

        $resourcePath = '/transactions/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($transaction_request)) {
            $_tempBody = $transaction_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        $httpMethod = 'POST';
        $urlWithParams = $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : '');

        $requestNonce = $this->guidv4Nonce();
        $requestSignature = $this->signRequest([
            $requestNonce,
            strtoupper($httpMethod),
            $urlWithParams,
            $this->digestHash($httpBody)
        ]);

        $headers['Authorization-Nonce'] = $requestNonce;
        $headers['Authorization-Signature'] = $requestSignature;
        $headers['Authorization-Key'] = $this->config->getApiKey();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $urlWithParams,
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        $options[RequestOptions::HTTP_ERRORS] = false;
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Parses and deserializes a response in string format.
     * Can be used to parse webhook responses that were already converted to strings
     *
     * @param object response the object we wish to parse
     * @param boolean returnType The type of the PHP object (true for array, false for object)
     *
     * @return object|array The deserialized PHP object
     * @throws ApiException If it fails to deserialize response body
     */
    public function parseResponseString($response, $returnType = null) {
        if (empty($response) || is_null($returnType )) {
            return null;
        }

        try {
            return ObjectSerializer::deserialize(
                $response,
                "\\TransferZero\\Model\\{$returnType}"
            );
        } catch (ApiException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }
    }

    /**
     * Sign request using HMAC-SHA512 algorithm
     *
     * @param array $params
     * @return string
     */
    protected function signRequest($params)
    {
        $to_sign = implode('&', $params);
        return hash_hmac(
            self::DIGEST,
            $to_sign,
            $this->config->getApiSecret()
        );
    }

    /**
     * Create a hash of the body content
     *
     * @param string $body
     * @return string
     */
    protected function digestHash($body)
    {
        return openssl_digest(trim($body), self::DIGEST);
    }

    /**
     * Generate a random nonce for authorization
     *
     * @return string
     */
    protected function guidv4Nonce()
    {
        if (function_exists('com_create_guid') === true) {
            return trim(com_create_guid(), '{}');
        }
        $data = openssl_random_pseudo_bytes(16);
        $data[6] = chr(ord($data[6]) & 0x0f | 0x40); // set version to 0100
        $data[8] = chr(ord($data[8]) & 0x3f | 0x80); // set bits 6-7 to 10
        return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));
    }
}

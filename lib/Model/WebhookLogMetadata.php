<?php
/**
 * WebhookLogMetadata
 *
 * PHP version 5
 *
 * @category Class
 * @package  TransferZero
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TransferZero API
 *
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TransferZero\Model;

use \ArrayAccess;
use \TransferZero\ObjectSerializer;

/**
 * WebhookLogMetadata Class Doc Comment
 *
 * @category Class
 * @package  TransferZero
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WebhookLogMetadata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WebhookLogMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'params' => '\TransferZero\Model\WebhookDefinition',
        'event' => 'string',
        'instance_id' => 'string',
        'instance_type' => 'string',
        'attempt_id' => 'string',
        'tries' => 'int',
        'request' => '\TransferZero\Model\WebhookLogMetadataRequest',
        'response' => '\TransferZero\Model\WebhookLogMetadataResponse',
        'app_id' => 'string',
        'api_key_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'params' => null,
        'event' => null,
        'instance_id' => null,
        'instance_type' => null,
        'attempt_id' => null,
        'tries' => 'int32',
        'request' => null,
        'response' => null,
        'app_id' => null,
        'api_key_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'params' => 'params',
        'event' => 'event',
        'instance_id' => 'instance_id',
        'instance_type' => 'instance_type',
        'attempt_id' => 'attempt_id',
        'tries' => 'tries',
        'request' => 'request',
        'response' => 'response',
        'app_id' => 'app_id',
        'api_key_id' => 'api_key_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'params' => 'setParams',
        'event' => 'setEvent',
        'instance_id' => 'setInstanceId',
        'instance_type' => 'setInstanceType',
        'attempt_id' => 'setAttemptId',
        'tries' => 'setTries',
        'request' => 'setRequest',
        'response' => 'setResponse',
        'app_id' => 'setAppId',
        'api_key_id' => 'setApiKeyId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'params' => 'getParams',
        'event' => 'getEvent',
        'instance_id' => 'getInstanceId',
        'instance_type' => 'getInstanceType',
        'attempt_id' => 'getAttemptId',
        'tries' => 'getTries',
        'request' => 'getRequest',
        'response' => 'getResponse',
        'app_id' => 'getAppId',
        'api_key_id' => 'getApiKeyId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['params'] = isset($data['params']) ? $data['params'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_type'] = isset($data['instance_type']) ? $data['instance_type'] : null;
        $this->container['attempt_id'] = isset($data['attempt_id']) ? $data['attempt_id'] : null;
        $this->container['tries'] = isset($data['tries']) ? $data['tries'] : null;
        $this->container['request'] = isset($data['request']) ? $data['request'] : null;
        $this->container['response'] = isset($data['response']) ? $data['response'] : null;
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['api_key_id'] = isset($data['api_key_id']) ? $data['api_key_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets params
     *
     * @return \TransferZero\Model\WebhookDefinition|null
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param \TransferZero\Model\WebhookDefinition|null $params params
     *
     * @return $this
     */
    public function setParams($params)
    {
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets event
     *
     * @return string|null
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string|null $event Specific event that triggered the webhook
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string|null
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string|null $instance_id Instance ID of the webhook event
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_type
     *
     * @return string|null
     */
    public function getInstanceType()
    {
        return $this->container['instance_type'];
    }

    /**
     * Sets instance_type
     *
     * @param string|null $instance_type Type of instance event
     *
     * @return $this
     */
    public function setInstanceType($instance_type)
    {
        $this->container['instance_type'] = $instance_type;

        return $this;
    }

    /**
     * Gets attempt_id
     *
     * @return string|null
     */
    public function getAttemptId()
    {
        return $this->container['attempt_id'];
    }

    /**
     * Sets attempt_id
     *
     * @param string|null $attempt_id Attempt ID
     *
     * @return $this
     */
    public function setAttemptId($attempt_id)
    {
        $this->container['attempt_id'] = $attempt_id;

        return $this;
    }

    /**
     * Gets tries
     *
     * @return int|null
     */
    public function getTries()
    {
        return $this->container['tries'];
    }

    /**
     * Sets tries
     *
     * @param int|null $tries Number of tries at the point webhook was triggered
     *
     * @return $this
     */
    public function setTries($tries)
    {
        $this->container['tries'] = $tries;

        return $this;
    }

    /**
     * Gets request
     *
     * @return \TransferZero\Model\WebhookLogMetadataRequest|null
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param \TransferZero\Model\WebhookLogMetadataRequest|null $request request
     *
     * @return $this
     */
    public function setRequest($request)
    {
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets response
     *
     * @return \TransferZero\Model\WebhookLogMetadataResponse|null
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param \TransferZero\Model\WebhookLogMetadataResponse|null $response response
     *
     * @return $this
     */
    public function setResponse($response)
    {
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return string|null
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string|null $app_id ID of app on which webhook event was triggered
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets api_key_id
     *
     * @return string|null
     */
    public function getApiKeyId()
    {
        return $this->container['api_key_id'];
    }

    /**
     * Sets api_key_id
     *
     * @param string|null $api_key_id ID of API key in use at point of webhook event
     *
     * @return $this
     */
    public function setApiKeyId($api_key_id)
    {
        $this->container['api_key_id'] = $api_key_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}



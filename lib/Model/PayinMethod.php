<?php
/**
 * PayinMethod
 *
 * PHP version 5
 *
 * @category Class
 * @package  TransferZero
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TransferZero API
 *
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TransferZero\Model;

use \ArrayAccess;
use \TransferZero\ObjectSerializer;

/**
 * PayinMethod Class Doc Comment
 *
 * @category Class
 * @description This describes the specific details on how the funds should be collected from the sender.
 * @package  TransferZero
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PayinMethod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayinMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'ux_flow' => '\TransferZero\Model\PayinMethodUxFlow',
        'in_details' => '\TransferZero\Model\PayinMethodDetails',
        'id' => 'string',
        'state' => '\TransferZero\Model\PayinMethodState',
        'state_reason_details' => '\TransferZero\Model\StateReasonDetails',
        'out_details' => 'object',
        'instructions' => 'object',
        'errors' => 'map[string,\TransferZero\Model\ValidationErrorDescription[]]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'ux_flow' => null,
        'in_details' => null,
        'id' => 'uuid',
        'state' => null,
        'state_reason_details' => null,
        'out_details' => null,
        'instructions' => null,
        'errors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'ux_flow' => 'ux_flow',
        'in_details' => 'in_details',
        'id' => 'id',
        'state' => 'state',
        'state_reason_details' => 'state_reason_details',
        'out_details' => 'out_details',
        'instructions' => 'instructions',
        'errors' => 'errors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'ux_flow' => 'setUxFlow',
        'in_details' => 'setInDetails',
        'id' => 'setId',
        'state' => 'setState',
        'state_reason_details' => 'setStateReasonDetails',
        'out_details' => 'setOutDetails',
        'instructions' => 'setInstructions',
        'errors' => 'setErrors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'ux_flow' => 'getUxFlow',
        'in_details' => 'getInDetails',
        'id' => 'getId',
        'state' => 'getState',
        'state_reason_details' => 'getStateReasonDetails',
        'out_details' => 'getOutDetails',
        'instructions' => 'getInstructions',
        'errors' => 'getErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['ux_flow'] = isset($data['ux_flow']) ? $data['ux_flow'] : null;
        $this->container['in_details'] = isset($data['in_details']) ? $data['in_details'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['state_reason_details'] = isset($data['state_reason_details']) ? $data['state_reason_details'] : null;
        $this->container['out_details'] = isset($data['out_details']) ? $data['out_details'] : null;
        $this->container['instructions'] = isset($data['instructions']) ? $data['instructions'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Describes how the payment should be requested from the sender.  Possible values: - `GHS::Mobile`: GHS mobile collections - `UGX::Mobile`: UGX mobile collections - `EUR::Bank`: EUR IBAN collections - `GBP::Bank`: GBP IBAN collections
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets ux_flow
     *
     * @return \TransferZero\Model\PayinMethodUxFlow|null
     */
    public function getUxFlow()
    {
        return $this->container['ux_flow'];
    }

    /**
     * Sets ux_flow
     *
     * @param \TransferZero\Model\PayinMethodUxFlow|null $ux_flow ux_flow
     *
     * @return $this
     */
    public function setUxFlow($ux_flow)
    {
        $this->container['ux_flow'] = $ux_flow;

        return $this;
    }

    /**
     * Gets in_details
     *
     * @return \TransferZero\Model\PayinMethodDetails|null
     */
    public function getInDetails()
    {
        return $this->container['in_details'];
    }

    /**
     * Sets in_details
     *
     * @param \TransferZero\Model\PayinMethodDetails|null $in_details in_details
     *
     * @return $this
     */
    public function setInDetails($in_details)
    {
        $this->container['in_details'] = $in_details;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \TransferZero\Model\PayinMethodState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \TransferZero\Model\PayinMethodState|null $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_reason_details
     *
     * @return \TransferZero\Model\StateReasonDetails|null
     */
    public function getStateReasonDetails()
    {
        return $this->container['state_reason_details'];
    }

    /**
     * Sets state_reason_details
     *
     * @param \TransferZero\Model\StateReasonDetails|null $state_reason_details state_reason_details
     *
     * @return $this
     */
    public function setStateReasonDetails($state_reason_details)
    {
        $this->container['state_reason_details'] = $state_reason_details;

        return $this;
    }

    /**
     * Gets out_details
     *
     * @return object|null
     */
    public function getOutDetails()
    {
        return $this->container['out_details'];
    }

    /**
     * Sets out_details
     *
     * @param object|null $out_details This will contain the description on where to pay the funds. Please see the [Collections Details](https://docs.transferzero.com/docs/collection-details) in the API documentation on what to expect here.
     *
     * @return $this
     */
    public function setOutDetails($out_details)
    {
        $this->container['out_details'] = $out_details;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return object|null
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param object|null $instructions This will contain the instructions on how to pay the funds. Please see the [Collections Details](https://docs.transferzero.com/docs/collection-details) in the API documentation on what to expect here.
     *
     * @return $this
     */
    public function setInstructions($instructions)
    {
        $this->container['instructions'] = $instructions;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return map[string,\TransferZero\Model\ValidationErrorDescription[]]|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param map[string,\TransferZero\Model\ValidationErrorDescription[]]|null $errors The fields that have some problems and don't pass validation
     *
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}



<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  TransferZero
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TransferZero API
 *
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TransferZero\Model;

use \ArrayAccess;
use \TransferZero\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @description The template of transactions are the following: &#x60;&#x60;&#x60;JSON {   \&quot;input_currency\&quot;: // currency to pay in,   \&quot;sender\&quot;:{     // details of the sender   },   \&quot;recipients\&quot;:[     {         \&quot;requested_amount\&quot;: // the amount to pay out,         \&quot;requested_currency\&quot;: // the currency of the amount,         \&quot;payout_method\&quot;:{           \&quot;type\&quot;: // method of the payout,           \&quot;details\&quot;:{               // details of the recipient           }         }     }   ],   \&quot;metadata\&quot;: // optional metadata } &#x60;&#x60;&#x60;
 * @package  TransferZero
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'input_currency' => 'string',
        'payin_methods' => '\TransferZero\Model\PayinMethod[]',
        'metadata' => 'object',
        'sender' => '\TransferZero\Model\Sender',
        'recipients' => '\TransferZero\Model\Recipient[]',
        'traits' => '\TransferZero\Model\TransactionTraits',
        'state' => '\TransferZero\Model\TransactionState',
        'input_amount' => 'float',
        'payin_reference' => 'string',
        'paid_amount' => 'float',
        'due_amount' => 'float',
        'created_at' => '\DateTime',
        'expires_at' => '\DateTime',
        'external_id' => 'string',
        'id' => 'string',
        'errors' => 'map[string,\TransferZero\Model\ValidationErrorDescription[]]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'input_currency' => null,
        'payin_methods' => null,
        'metadata' => null,
        'sender' => null,
        'recipients' => null,
        'traits' => null,
        'state' => null,
        'input_amount' => null,
        'payin_reference' => null,
        'paid_amount' => null,
        'due_amount' => null,
        'created_at' => 'date-time',
        'expires_at' => 'date-time',
        'external_id' => null,
        'id' => 'uuid',
        'errors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input_currency' => 'input_currency',
        'payin_methods' => 'payin_methods',
        'metadata' => 'metadata',
        'sender' => 'sender',
        'recipients' => 'recipients',
        'traits' => 'traits',
        'state' => 'state',
        'input_amount' => 'input_amount',
        'payin_reference' => 'payin_reference',
        'paid_amount' => 'paid_amount',
        'due_amount' => 'due_amount',
        'created_at' => 'created_at',
        'expires_at' => 'expires_at',
        'external_id' => 'external_id',
        'id' => 'id',
        'errors' => 'errors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input_currency' => 'setInputCurrency',
        'payin_methods' => 'setPayinMethods',
        'metadata' => 'setMetadata',
        'sender' => 'setSender',
        'recipients' => 'setRecipients',
        'traits' => 'setTraits',
        'state' => 'setState',
        'input_amount' => 'setInputAmount',
        'payin_reference' => 'setPayinReference',
        'paid_amount' => 'setPaidAmount',
        'due_amount' => 'setDueAmount',
        'created_at' => 'setCreatedAt',
        'expires_at' => 'setExpiresAt',
        'external_id' => 'setExternalId',
        'id' => 'setId',
        'errors' => 'setErrors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input_currency' => 'getInputCurrency',
        'payin_methods' => 'getPayinMethods',
        'metadata' => 'getMetadata',
        'sender' => 'getSender',
        'recipients' => 'getRecipients',
        'traits' => 'getTraits',
        'state' => 'getState',
        'input_amount' => 'getInputAmount',
        'payin_reference' => 'getPayinReference',
        'paid_amount' => 'getPaidAmount',
        'due_amount' => 'getDueAmount',
        'created_at' => 'getCreatedAt',
        'expires_at' => 'getExpiresAt',
        'external_id' => 'getExternalId',
        'id' => 'getId',
        'errors' => 'getErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input_currency'] = isset($data['input_currency']) ? $data['input_currency'] : null;
        $this->container['payin_methods'] = isset($data['payin_methods']) ? $data['payin_methods'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['recipients'] = isset($data['recipients']) ? $data['recipients'] : null;
        $this->container['traits'] = isset($data['traits']) ? $data['traits'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['input_amount'] = isset($data['input_amount']) ? $data['input_amount'] : null;
        $this->container['payin_reference'] = isset($data['payin_reference']) ? $data['payin_reference'] : null;
        $this->container['paid_amount'] = isset($data['paid_amount']) ? $data['paid_amount'] : null;
        $this->container['due_amount'] = isset($data['due_amount']) ? $data['due_amount'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['input_currency'] === null) {
            $invalidProperties[] = "'input_currency' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['recipients'] === null) {
            $invalidProperties[] = "'recipients' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets input_currency
     *
     * @return string
     */
    public function getInputCurrency()
    {
        return $this->container['input_currency'];
    }

    /**
     * Sets input_currency
     *
     * @param string $input_currency The input currency describes what currency the transaction will be paid in (3-character alpha ISO 4217 currency format). For example if you wish to create an EUR to NGN transaction then input currency should be set to EUR.
     *
     * @return $this
     */
    public function setInputCurrency($input_currency)
    {
        $this->container['input_currency'] = $input_currency;

        return $this;
    }

    /**
     * Gets payin_methods
     *
     * @return \TransferZero\Model\PayinMethod[]|null
     */
    public function getPayinMethods()
    {
        return $this->container['payin_methods'];
    }

    /**
     * Sets payin_methods
     *
     * @param \TransferZero\Model\PayinMethod[]|null $payin_methods Allows setting alternative collections, where funding the transaction is done through alternative means and not via account balance.  For more information please see [Collections from senders](https://github.com/transferzero/api-documentation/blob/master/additional-features.md#collections-from-senders) in the API documentation
     *
     * @return $this
     */
    public function setPayinMethods($payin_methods)
    {
        $this->container['payin_methods'] = $payin_methods;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Additional metadata to store on the transaction. If you widh to store your local transaction ID, you should add it here inside a `sendRef` field, and we will return this value back to you in the daily transaction reports.
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \TransferZero\Model\Sender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \TransferZero\Model\Sender $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \TransferZero\Model\Recipient[]
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \TransferZero\Model\Recipient[] $recipients The details of where the payment should go. although transactions can support paying out multiple recipients, usually one is provided.
     *
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets traits
     *
     * @return \TransferZero\Model\TransactionTraits|null
     */
    public function getTraits()
    {
        return $this->container['traits'];
    }

    /**
     * Sets traits
     *
     * @param \TransferZero\Model\TransactionTraits|null $traits traits
     *
     * @return $this
     */
    public function setTraits($traits)
    {
        $this->container['traits'] = $traits;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \TransferZero\Model\TransactionState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \TransferZero\Model\TransactionState|null $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets input_amount
     *
     * @return float|null
     */
    public function getInputAmount()
    {
        return $this->container['input_amount'];
    }

    /**
     * Sets input_amount
     *
     * @param float|null $input_amount The amount that was requested in the input currency
     *
     * @return $this
     */
    public function setInputAmount($input_amount)
    {
        $this->container['input_amount'] = $input_amount;

        return $this;
    }

    /**
     * Gets payin_reference
     *
     * @return string|null
     */
    public function getPayinReference()
    {
        return $this->container['payin_reference'];
    }

    /**
     * Sets payin_reference
     *
     * @param string|null $payin_reference The reference number that has to be provided in case the transaction is not funded through account balance
     *
     * @return $this
     */
    public function setPayinReference($payin_reference)
    {
        $this->container['payin_reference'] = $payin_reference;

        return $this;
    }

    /**
     * Gets paid_amount
     *
     * @return float|null
     */
    public function getPaidAmount()
    {
        return $this->container['paid_amount'];
    }

    /**
     * Sets paid_amount
     *
     * @param float|null $paid_amount The amount that was already paid in to the transaction
     *
     * @return $this
     */
    public function setPaidAmount($paid_amount)
    {
        $this->container['paid_amount'] = $paid_amount;

        return $this;
    }

    /**
     * Gets due_amount
     *
     * @return float|null
     */
    public function getDueAmount()
    {
        return $this->container['due_amount'];
    }

    /**
     * Sets due_amount
     *
     * @param float|null $due_amount The amount needed to be paid in for the transaction to get funded
     *
     * @return $this
     */
    public function setDueAmount($due_amount)
    {
        $this->container['due_amount'] = $due_amount;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The time the transaction was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime|null $expires_at The latest time when the transaction has to be funded, otherwise it will be cancelled
     *
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Optional ID that is supplied by partner linking it to the partner's own Sender ID. Note: if present we will validate whether the sent ID is a duplicate in our system or not.
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return map[string,\TransferZero\Model\ValidationErrorDescription[]]|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param map[string,\TransferZero\Model\ValidationErrorDescription[]]|null $errors The fields that have some problems and don't pass validation
     *
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}



<?php
/**
 * Sender
 *
 * PHP version 5
 *
 * @category Class
 * @package  TransferZero
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TransferZero API
 *
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TransferZero\Model;

use \ArrayAccess;
use \TransferZero\ObjectSerializer;

/**
 * Sender Class Doc Comment
 *
 * @category Class
 * @description This contains the details of the sender. The first time a specific sender is used the full details should be provided. Once a sender is created and is used, the next time you MUST only send the ID of the sender. This is so we can match the same sender across multiple transactions for KYC and audit purposes.  Personal Sender Example: &#x60;&#x60;&#x60;json {   // name   \&quot;first_name\&quot;: \&quot;Jane\&quot;,   \&quot;last_name\&quot;: \&quot;Doe\&quot;,    // address   \&quot;country\&quot;: \&quot;US\&quot;,   \&quot;city\&quot;: \&quot;New York\&quot;,   \&quot;street\&quot;: \&quot;20 W 34th St\&quot;,   \&quot;postal_code\&quot;: \&quot;10001\&quot;,   \&quot;address_description\&quot;: \&quot;\&quot;,    // DOB   \&quot;birth_date\&quot;: \&quot;1974-12-24\&quot;,    // Contact Details; You can usually use your company&#39;s contact details here   \&quot;phone_country\&quot;: \&quot;US\&quot;,   \&quot;phone_number\&quot;: \&quot;5555551234\&quot;,   \&quot;email\&quot;: \&quot;info@transferzero.com\&quot;,    // ID of the sender in your system   \&quot;external_id\&quot;: \&quot;Sender:US:234523\&quot;,    // these fields are mandatory, but you can usually leave them with the following default values:   \&quot;documents\&quot;: [ ],   \&quot;ip\&quot;: \&quot;127.0.0.1\&quot;,   \&quot;metadata\&quot;: {} } &#x60;&#x60;&#x60;  Business Sender Example:  &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;business\&quot;,   \&quot;name\&quot;: \&quot;Company name\&quot;,    // Country of Incorporation   \&quot;country\&quot;: \&quot;US\&quot;,    // Trading address of the company   \&quot;trading_country\&quot;: \&quot;US\&quot;,   \&quot;city\&quot;: \&quot;New York\&quot;,   \&quot;street\&quot;: \&quot;20 W 34th St\&quot;,   \&quot;postal_code\&quot;: \&quot;10001\&quot;,   \&quot;address_description\&quot;: \&quot;\&quot;,    // Company Details   \&quot;legal_entity_type\&quot;: \&quot;privately_owned_company\&quot;,   \&quot;registration_date\&quot;: \&quot;2012-01-25\&quot;,   \&quot;registration_number\&quot;: \&quot;VAT1234567\&quot;,   \&quot;nature_of_business\&quot;: \&quot;retail_trade\&quot;,    // Contact Details   \&quot;phone_country\&quot;: \&quot;US\&quot;,   \&quot;phone_number\&quot;: \&quot;5555551234\&quot;,   \&quot;email\&quot;: \&quot;example@home.org\&quot;,    // ID of the sender in your system   \&quot;external_id\&quot;: \&quot;Sender:Business:US:234523\&quot;,    // these fields are mandatory, but you can usually leave them with the following default values:   \&quot;documents\&quot;: [ ],   \&quot;ip\&quot;: \&quot;127.0.0.1\&quot;,   \&quot;metadata\&quot;: {} } &#x60;&#x60;&#x60;  [Sender in the API documentation](https://docs.transferzero.com/docs/transaction-flow/#sender)
 * @package  TransferZero
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Sender implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Sender';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'state' => '\TransferZero\Model\SenderState',
        'country' => 'string',
        'street' => 'string',
        'postal_code' => 'string',
        'city' => 'string',
        'phone_country' => 'string',
        'phone_number' => 'string',
        'email' => 'string',
        'ip' => 'string',
        'address_description' => 'string',
        'identification_number' => 'string',
        'identification_type' => 'string',
        'lang' => 'string',
        'name' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_name' => 'string',
        'birth_date' => '\DateTime',
        'occupation' => 'string',
        'nationality' => 'string',
        'legal_entity_type' => 'string',
        'registration_date' => '\DateTime',
        'registration_number' => 'string',
        'nature_of_business' => 'string',
        'source_of_funds' => 'string',
        'custom_source_of_funds' => 'string',
        'core_business_activity' => 'string',
        'purpose_of_opening_account' => 'string',
        'office_phone' => 'string',
        'vat_registration_number' => 'string',
        'financial_regulator' => 'string',
        'regulatory_licence_number' => 'string',
        'contact_person_email' => 'string',
        'trading_country' => 'string',
        'trading_address' => 'string',
        'number_monthly_transactions' => 'string',
        'amount_monthly_transactions' => 'string',
        'documents' => '\TransferZero\Model\Document[]',
        'metadata' => 'object',
        'errors' => 'map[string,\TransferZero\Model\ValidationErrorDescription[]]',
        'onboarding_status' => 'string',
        'politically_exposed_people' => '\TransferZero\Model\PoliticallyExposedPerson[]',
        'external_id' => 'string',
        'city_of_birth' => 'string',
        'country_of_birth' => 'string',
        'gender' => 'string',
        'sales_lead_id' => 'string',
        'created_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'type' => null,
        'state' => null,
        'country' => null,
        'street' => null,
        'postal_code' => null,
        'city' => null,
        'phone_country' => null,
        'phone_number' => null,
        'email' => 'email',
        'ip' => 'ipv4',
        'address_description' => null,
        'identification_number' => null,
        'identification_type' => null,
        'lang' => null,
        'name' => null,
        'first_name' => null,
        'middle_name' => null,
        'last_name' => null,
        'birth_date' => 'date',
        'occupation' => null,
        'nationality' => null,
        'legal_entity_type' => null,
        'registration_date' => 'date',
        'registration_number' => null,
        'nature_of_business' => null,
        'source_of_funds' => null,
        'custom_source_of_funds' => null,
        'core_business_activity' => null,
        'purpose_of_opening_account' => null,
        'office_phone' => null,
        'vat_registration_number' => null,
        'financial_regulator' => null,
        'regulatory_licence_number' => null,
        'contact_person_email' => null,
        'trading_country' => null,
        'trading_address' => null,
        'number_monthly_transactions' => null,
        'amount_monthly_transactions' => null,
        'documents' => null,
        'metadata' => null,
        'errors' => null,
        'onboarding_status' => null,
        'politically_exposed_people' => null,
        'external_id' => null,
        'city_of_birth' => null,
        'country_of_birth' => null,
        'gender' => null,
        'sales_lead_id' => null,
        'created_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'state' => 'state',
        'country' => 'country',
        'street' => 'street',
        'postal_code' => 'postal_code',
        'city' => 'city',
        'phone_country' => 'phone_country',
        'phone_number' => 'phone_number',
        'email' => 'email',
        'ip' => 'ip',
        'address_description' => 'address_description',
        'identification_number' => 'identification_number',
        'identification_type' => 'identification_type',
        'lang' => 'lang',
        'name' => 'name',
        'first_name' => 'first_name',
        'middle_name' => 'middle_name',
        'last_name' => 'last_name',
        'birth_date' => 'birth_date',
        'occupation' => 'occupation',
        'nationality' => 'nationality',
        'legal_entity_type' => 'legal_entity_type',
        'registration_date' => 'registration_date',
        'registration_number' => 'registration_number',
        'nature_of_business' => 'nature_of_business',
        'source_of_funds' => 'source_of_funds',
        'custom_source_of_funds' => 'custom_source_of_funds',
        'core_business_activity' => 'core_business_activity',
        'purpose_of_opening_account' => 'purpose_of_opening_account',
        'office_phone' => 'office_phone',
        'vat_registration_number' => 'vat_registration_number',
        'financial_regulator' => 'financial_regulator',
        'regulatory_licence_number' => 'regulatory_licence_number',
        'contact_person_email' => 'contact_person_email',
        'trading_country' => 'trading_country',
        'trading_address' => 'trading_address',
        'number_monthly_transactions' => 'number_monthly_transactions',
        'amount_monthly_transactions' => 'amount_monthly_transactions',
        'documents' => 'documents',
        'metadata' => 'metadata',
        'errors' => 'errors',
        'onboarding_status' => 'onboarding_status',
        'politically_exposed_people' => 'politically_exposed_people',
        'external_id' => 'external_id',
        'city_of_birth' => 'city_of_birth',
        'country_of_birth' => 'country_of_birth',
        'gender' => 'gender',
        'sales_lead_id' => 'sales_lead_id',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'state' => 'setState',
        'country' => 'setCountry',
        'street' => 'setStreet',
        'postal_code' => 'setPostalCode',
        'city' => 'setCity',
        'phone_country' => 'setPhoneCountry',
        'phone_number' => 'setPhoneNumber',
        'email' => 'setEmail',
        'ip' => 'setIp',
        'address_description' => 'setAddressDescription',
        'identification_number' => 'setIdentificationNumber',
        'identification_type' => 'setIdentificationType',
        'lang' => 'setLang',
        'name' => 'setName',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_name' => 'setLastName',
        'birth_date' => 'setBirthDate',
        'occupation' => 'setOccupation',
        'nationality' => 'setNationality',
        'legal_entity_type' => 'setLegalEntityType',
        'registration_date' => 'setRegistrationDate',
        'registration_number' => 'setRegistrationNumber',
        'nature_of_business' => 'setNatureOfBusiness',
        'source_of_funds' => 'setSourceOfFunds',
        'custom_source_of_funds' => 'setCustomSourceOfFunds',
        'core_business_activity' => 'setCoreBusinessActivity',
        'purpose_of_opening_account' => 'setPurposeOfOpeningAccount',
        'office_phone' => 'setOfficePhone',
        'vat_registration_number' => 'setVatRegistrationNumber',
        'financial_regulator' => 'setFinancialRegulator',
        'regulatory_licence_number' => 'setRegulatoryLicenceNumber',
        'contact_person_email' => 'setContactPersonEmail',
        'trading_country' => 'setTradingCountry',
        'trading_address' => 'setTradingAddress',
        'number_monthly_transactions' => 'setNumberMonthlyTransactions',
        'amount_monthly_transactions' => 'setAmountMonthlyTransactions',
        'documents' => 'setDocuments',
        'metadata' => 'setMetadata',
        'errors' => 'setErrors',
        'onboarding_status' => 'setOnboardingStatus',
        'politically_exposed_people' => 'setPoliticallyExposedPeople',
        'external_id' => 'setExternalId',
        'city_of_birth' => 'setCityOfBirth',
        'country_of_birth' => 'setCountryOfBirth',
        'gender' => 'setGender',
        'sales_lead_id' => 'setSalesLeadId',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'state' => 'getState',
        'country' => 'getCountry',
        'street' => 'getStreet',
        'postal_code' => 'getPostalCode',
        'city' => 'getCity',
        'phone_country' => 'getPhoneCountry',
        'phone_number' => 'getPhoneNumber',
        'email' => 'getEmail',
        'ip' => 'getIp',
        'address_description' => 'getAddressDescription',
        'identification_number' => 'getIdentificationNumber',
        'identification_type' => 'getIdentificationType',
        'lang' => 'getLang',
        'name' => 'getName',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_name' => 'getLastName',
        'birth_date' => 'getBirthDate',
        'occupation' => 'getOccupation',
        'nationality' => 'getNationality',
        'legal_entity_type' => 'getLegalEntityType',
        'registration_date' => 'getRegistrationDate',
        'registration_number' => 'getRegistrationNumber',
        'nature_of_business' => 'getNatureOfBusiness',
        'source_of_funds' => 'getSourceOfFunds',
        'custom_source_of_funds' => 'getCustomSourceOfFunds',
        'core_business_activity' => 'getCoreBusinessActivity',
        'purpose_of_opening_account' => 'getPurposeOfOpeningAccount',
        'office_phone' => 'getOfficePhone',
        'vat_registration_number' => 'getVatRegistrationNumber',
        'financial_regulator' => 'getFinancialRegulator',
        'regulatory_licence_number' => 'getRegulatoryLicenceNumber',
        'contact_person_email' => 'getContactPersonEmail',
        'trading_country' => 'getTradingCountry',
        'trading_address' => 'getTradingAddress',
        'number_monthly_transactions' => 'getNumberMonthlyTransactions',
        'amount_monthly_transactions' => 'getAmountMonthlyTransactions',
        'documents' => 'getDocuments',
        'metadata' => 'getMetadata',
        'errors' => 'getErrors',
        'onboarding_status' => 'getOnboardingStatus',
        'politically_exposed_people' => 'getPoliticallyExposedPeople',
        'external_id' => 'getExternalId',
        'city_of_birth' => 'getCityOfBirth',
        'country_of_birth' => 'getCountryOfBirth',
        'gender' => 'getGender',
        'sales_lead_id' => 'getSalesLeadId',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_PERSON = 'person';
    const TYPE_BUSINESS = 'business';
    const IDENTIFICATION_TYPE_DL = 'DL';
    const IDENTIFICATION_TYPE_PP = 'PP';
    const IDENTIFICATION_TYPE_ID = 'ID';
    const IDENTIFICATION_TYPE_OT = 'OT';
    const LEGAL_ENTITY_TYPE_SOLE_PROPRIETORSHIP = 'sole_proprietorship';
    const LEGAL_ENTITY_TYPE_PARTNERSHIP = 'partnership';
    const LEGAL_ENTITY_TYPE_PRIVATELY_OWNED_COMPANY = 'privately_owned_company';
    const LEGAL_ENTITY_TYPE_PUBLICLY_OWNED_COMPANY = 'publicly_owned_company';
    const LEGAL_ENTITY_TYPE_GOVERNMENT_OWNED_ENTITY = 'government_owned_entity';
    const LEGAL_ENTITY_TYPE_TRUST = 'trust';
    const LEGAL_ENTITY_TYPE_NGO = 'ngo';
    const LEGAL_ENTITY_TYPE_CLUB_AND_SOCIETY = 'club_and_society';
    const LEGAL_ENTITY_TYPE_GO = 'go';
    const LEGAL_ENTITY_TYPE_OTHER = 'other';
    const LEGAL_ENTITY_TYPE_FINANCIAL_INSTITUTION = 'financial_institution';
    const NATURE_OF_BUSINESS_PERSONAL = 'personal';
    const NATURE_OF_BUSINESS_AGRICULTURE_AND_HUNTING = 'agriculture_and_hunting';
    const NATURE_OF_BUSINESS_FORESTRY = 'forestry';
    const NATURE_OF_BUSINESS_FISHING = 'fishing';
    const NATURE_OF_BUSINESS_AGRICULTURAL_BY_PRODUCTS = 'agricultural_by_products';
    const NATURE_OF_BUSINESS_COAL_MINING = 'coal_mining';
    const NATURE_OF_BUSINESS_OIL_MINING = 'oil_mining';
    const NATURE_OF_BUSINESS_IRON_ORE_MINING = 'iron_ore_mining';
    const NATURE_OF_BUSINESS_OTHER_METAL_AND_DIAMOND_MINING = 'other_metal_and_diamond_mining';
    const NATURE_OF_BUSINESS_OTHER_MINERAL_MINING = 'other_mineral_mining';
    const NATURE_OF_BUSINESS_MANUFACTURING_OF_FOOD_DRINK_TOBACCO = 'manufacturing_of_food_drink_tobacco';
    const NATURE_OF_BUSINESS_MANUFACTURING_OF_TEXTILES_LEATHER_FUR_FURNITURE = 'manufacturing_of_textiles_leather_fur_furniture';
    const NATURE_OF_BUSINESS_MANUFACTURE_OF_WOODEN_PRODUCTS_FURNITURE = 'manufacture_of_wooden_products_furniture';
    const NATURE_OF_BUSINESS_MANUFACTURE_OF_PAPER_PULP_ALLIED_PRODUCTS = 'manufacture_of_paper_pulp_allied_products';
    const NATURE_OF_BUSINESS_MANUFACTURE_OF_CHEMICALS_MEDICAL_PETROLEUM_RUBBER_PLASTIC_PRODUCTS = 'manufacture_of_chemicals_medical_petroleum_rubber_plastic_products';
    const NATURE_OF_BUSINESS_MANUFACTURE_OF_POTTERY_CHINA_GLASS_STONE = 'manufacture_of_pottery_china_glass_stone';
    const NATURE_OF_BUSINESS_MANUFACTURE_OF_IRON_STEEL_NON_FERROUS_METALS_BASIC_INDUSTRIES = 'manufacture_of_iron_steel_non_ferrous_metals_basic_industries';
    const NATURE_OF_BUSINESS_MANUFACTURE_OF_METAL_PRODUCTS_ELECTRICAL_AND_SCIENTIFIC_ENGINEERING = 'manufacture_of_metal_products_electrical_and_scientific_engineering';
    const NATURE_OF_BUSINESS_MANUFACTURE_OF_JEWELRY_MUSICAL_INSTRUMENTS_TOYS = 'manufacture_of_jewelry_musical_instruments_toys';
    const NATURE_OF_BUSINESS_ELECTRICITY_GAS_AND_WATER = 'electricity_gas_and_water';
    const NATURE_OF_BUSINESS_CONSTRUCTION = 'construction';
    const NATURE_OF_BUSINESS_WHOLESALE_TRADE = 'wholesale_trade';
    const NATURE_OF_BUSINESS_RETAIL_TRADE = 'retail_trade';
    const NATURE_OF_BUSINESS_CATERING_INCL_HOTELS = 'catering_incl_hotels';
    const NATURE_OF_BUSINESS_TRANSPORT_STORAGE = 'transport_storage';
    const NATURE_OF_BUSINESS_COMMUNICATIONS = 'communications';
    const NATURE_OF_BUSINESS_FINANCE_AND_HOLDING_COMPANIES = 'finance_and_holding_companies';
    const NATURE_OF_BUSINESS_INSURANCE = 'insurance';
    const NATURE_OF_BUSINESS_BUSINESS_SERVICES = 'business_services';
    const NATURE_OF_BUSINESS_REAL_ESTATE_DEVELOPMENT_INVESTMENT = 'real_estate_development_investment';
    const NATURE_OF_BUSINESS_CENTRAL_STATE_GOVERNMENTS = 'central_state_governments';
    const NATURE_OF_BUSINESS_COMMUNITY_SERVICES_DEFENCE_POLICE_PRISONS_ETC = 'community_services_defence_police_prisons_etc';
    const NATURE_OF_BUSINESS_SOCIAL_SERVICES_EDUCATION_HEALTH_CARE = 'social_services_education_health_care';
    const NATURE_OF_BUSINESS_PERSONAL_SERVICES_LEISURE_SERVICES = 'personal_services_leisure_services';
    const NATURE_OF_BUSINESS_PERSONAL_SERVICES_DOMESTIC_LAUNDRY_REPAIRS = 'personal_services_domestic_laundry_repairs';
    const NATURE_OF_BUSINESS_PERSONAL_SERVICES_EMBASSIES_INTERNATIONAL_ORGANISATIONS = 'personal_services_embassies_international_organisations';
    const GENDER_M = 'M';
    const GENDER_F = 'F';
    const GENDER_O = 'O';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PERSON,
            self::TYPE_BUSINESS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdentificationTypeAllowableValues()
    {
        return [
            self::IDENTIFICATION_TYPE_DL,
            self::IDENTIFICATION_TYPE_PP,
            self::IDENTIFICATION_TYPE_ID,
            self::IDENTIFICATION_TYPE_OT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLegalEntityTypeAllowableValues()
    {
        return [
            self::LEGAL_ENTITY_TYPE_SOLE_PROPRIETORSHIP,
            self::LEGAL_ENTITY_TYPE_PARTNERSHIP,
            self::LEGAL_ENTITY_TYPE_PRIVATELY_OWNED_COMPANY,
            self::LEGAL_ENTITY_TYPE_PUBLICLY_OWNED_COMPANY,
            self::LEGAL_ENTITY_TYPE_GOVERNMENT_OWNED_ENTITY,
            self::LEGAL_ENTITY_TYPE_TRUST,
            self::LEGAL_ENTITY_TYPE_NGO,
            self::LEGAL_ENTITY_TYPE_CLUB_AND_SOCIETY,
            self::LEGAL_ENTITY_TYPE_GO,
            self::LEGAL_ENTITY_TYPE_OTHER,
            self::LEGAL_ENTITY_TYPE_FINANCIAL_INSTITUTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNatureOfBusinessAllowableValues()
    {
        return [
            self::NATURE_OF_BUSINESS_PERSONAL,
            self::NATURE_OF_BUSINESS_AGRICULTURE_AND_HUNTING,
            self::NATURE_OF_BUSINESS_FORESTRY,
            self::NATURE_OF_BUSINESS_FISHING,
            self::NATURE_OF_BUSINESS_AGRICULTURAL_BY_PRODUCTS,
            self::NATURE_OF_BUSINESS_COAL_MINING,
            self::NATURE_OF_BUSINESS_OIL_MINING,
            self::NATURE_OF_BUSINESS_IRON_ORE_MINING,
            self::NATURE_OF_BUSINESS_OTHER_METAL_AND_DIAMOND_MINING,
            self::NATURE_OF_BUSINESS_OTHER_MINERAL_MINING,
            self::NATURE_OF_BUSINESS_MANUFACTURING_OF_FOOD_DRINK_TOBACCO,
            self::NATURE_OF_BUSINESS_MANUFACTURING_OF_TEXTILES_LEATHER_FUR_FURNITURE,
            self::NATURE_OF_BUSINESS_MANUFACTURE_OF_WOODEN_PRODUCTS_FURNITURE,
            self::NATURE_OF_BUSINESS_MANUFACTURE_OF_PAPER_PULP_ALLIED_PRODUCTS,
            self::NATURE_OF_BUSINESS_MANUFACTURE_OF_CHEMICALS_MEDICAL_PETROLEUM_RUBBER_PLASTIC_PRODUCTS,
            self::NATURE_OF_BUSINESS_MANUFACTURE_OF_POTTERY_CHINA_GLASS_STONE,
            self::NATURE_OF_BUSINESS_MANUFACTURE_OF_IRON_STEEL_NON_FERROUS_METALS_BASIC_INDUSTRIES,
            self::NATURE_OF_BUSINESS_MANUFACTURE_OF_METAL_PRODUCTS_ELECTRICAL_AND_SCIENTIFIC_ENGINEERING,
            self::NATURE_OF_BUSINESS_MANUFACTURE_OF_JEWELRY_MUSICAL_INSTRUMENTS_TOYS,
            self::NATURE_OF_BUSINESS_ELECTRICITY_GAS_AND_WATER,
            self::NATURE_OF_BUSINESS_CONSTRUCTION,
            self::NATURE_OF_BUSINESS_WHOLESALE_TRADE,
            self::NATURE_OF_BUSINESS_RETAIL_TRADE,
            self::NATURE_OF_BUSINESS_CATERING_INCL_HOTELS,
            self::NATURE_OF_BUSINESS_TRANSPORT_STORAGE,
            self::NATURE_OF_BUSINESS_COMMUNICATIONS,
            self::NATURE_OF_BUSINESS_FINANCE_AND_HOLDING_COMPANIES,
            self::NATURE_OF_BUSINESS_INSURANCE,
            self::NATURE_OF_BUSINESS_BUSINESS_SERVICES,
            self::NATURE_OF_BUSINESS_REAL_ESTATE_DEVELOPMENT_INVESTMENT,
            self::NATURE_OF_BUSINESS_CENTRAL_STATE_GOVERNMENTS,
            self::NATURE_OF_BUSINESS_COMMUNITY_SERVICES_DEFENCE_POLICE_PRISONS_ETC,
            self::NATURE_OF_BUSINESS_SOCIAL_SERVICES_EDUCATION_HEALTH_CARE,
            self::NATURE_OF_BUSINESS_PERSONAL_SERVICES_LEISURE_SERVICES,
            self::NATURE_OF_BUSINESS_PERSONAL_SERVICES_DOMESTIC_LAUNDRY_REPAIRS,
            self::NATURE_OF_BUSINESS_PERSONAL_SERVICES_EMBASSIES_INTERNATIONAL_ORGANISATIONS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_M,
            self::GENDER_F,
            self::GENDER_O,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['phone_country'] = isset($data['phone_country']) ? $data['phone_country'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['address_description'] = isset($data['address_description']) ? $data['address_description'] : null;
        $this->container['identification_number'] = isset($data['identification_number']) ? $data['identification_number'] : null;
        $this->container['identification_type'] = isset($data['identification_type']) ? $data['identification_type'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['occupation'] = isset($data['occupation']) ? $data['occupation'] : null;
        $this->container['nationality'] = isset($data['nationality']) ? $data['nationality'] : null;
        $this->container['legal_entity_type'] = isset($data['legal_entity_type']) ? $data['legal_entity_type'] : null;
        $this->container['registration_date'] = isset($data['registration_date']) ? $data['registration_date'] : null;
        $this->container['registration_number'] = isset($data['registration_number']) ? $data['registration_number'] : null;
        $this->container['nature_of_business'] = isset($data['nature_of_business']) ? $data['nature_of_business'] : null;
        $this->container['source_of_funds'] = isset($data['source_of_funds']) ? $data['source_of_funds'] : null;
        $this->container['custom_source_of_funds'] = isset($data['custom_source_of_funds']) ? $data['custom_source_of_funds'] : null;
        $this->container['core_business_activity'] = isset($data['core_business_activity']) ? $data['core_business_activity'] : null;
        $this->container['purpose_of_opening_account'] = isset($data['purpose_of_opening_account']) ? $data['purpose_of_opening_account'] : null;
        $this->container['office_phone'] = isset($data['office_phone']) ? $data['office_phone'] : null;
        $this->container['vat_registration_number'] = isset($data['vat_registration_number']) ? $data['vat_registration_number'] : null;
        $this->container['financial_regulator'] = isset($data['financial_regulator']) ? $data['financial_regulator'] : null;
        $this->container['regulatory_licence_number'] = isset($data['regulatory_licence_number']) ? $data['regulatory_licence_number'] : null;
        $this->container['contact_person_email'] = isset($data['contact_person_email']) ? $data['contact_person_email'] : null;
        $this->container['trading_country'] = isset($data['trading_country']) ? $data['trading_country'] : null;
        $this->container['trading_address'] = isset($data['trading_address']) ? $data['trading_address'] : null;
        $this->container['number_monthly_transactions'] = isset($data['number_monthly_transactions']) ? $data['number_monthly_transactions'] : null;
        $this->container['amount_monthly_transactions'] = isset($data['amount_monthly_transactions']) ? $data['amount_monthly_transactions'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
        $this->container['onboarding_status'] = isset($data['onboarding_status']) ? $data['onboarding_status'] : null;
        $this->container['politically_exposed_people'] = isset($data['politically_exposed_people']) ? $data['politically_exposed_people'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['city_of_birth'] = isset($data['city_of_birth']) ? $data['city_of_birth'] : null;
        $this->container['country_of_birth'] = isset($data['country_of_birth']) ? $data['country_of_birth'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['sales_lead_id'] = isset($data['sales_lead_id']) ? $data['sales_lead_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['street'] === null) {
            $invalidProperties[] = "'street' can't be null";
        }
        if ($this->container['postal_code'] === null) {
            $invalidProperties[] = "'postal_code' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['phone_country'] === null) {
            $invalidProperties[] = "'phone_country' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['ip'] === null) {
            $invalidProperties[] = "'ip' can't be null";
        }
        $allowedValues = $this->getIdentificationTypeAllowableValues();
        if (!is_null($this->container['identification_type']) && !in_array($this->container['identification_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'identification_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLegalEntityTypeAllowableValues();
        if (!is_null($this->container['legal_entity_type']) && !in_array($this->container['legal_entity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'legal_entity_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNatureOfBusinessAllowableValues();
        if (!is_null($this->container['nature_of_business']) && !in_array($this->container['nature_of_business'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'nature_of_business', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['documents'] === null) {
            $invalidProperties[] = "'documents' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of sender to create - either person or business (defaults to person)
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \TransferZero\Model\SenderState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \TransferZero\Model\SenderState|null $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Country of sender in 2-character alpha ISO 3166-2 country format. This is the residential country for personal senders and the country of incorporation for business senders.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Sender's street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Zip code of sender
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Sender's city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets phone_country
     *
     * @return string
     */
    public function getPhoneCountry()
    {
        return $this->container['phone_country'];
    }

    /**
     * Sets phone_country
     *
     * @param string $phone_country Phone country of sender in 2-character alpha ISO 3166-2 country format
     *
     * @return $this
     */
    public function setPhoneCountry($phone_country)
    {
        $this->container['phone_country'] = $phone_country;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number Phone number of sender (without country callcode)
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email of sender
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip IP of sender
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets address_description
     *
     * @return string|null
     */
    public function getAddressDescription()
    {
        return $this->container['address_description'];
    }

    /**
     * Sets address_description
     *
     * @param string|null $address_description Description of address
     *
     * @return $this
     */
    public function setAddressDescription($address_description)
    {
        $this->container['address_description'] = $address_description;

        return $this;
    }

    /**
     * Gets identification_number
     *
     * @return string|null
     */
    public function getIdentificationNumber()
    {
        return $this->container['identification_number'];
    }

    /**
     * Sets identification_number
     *
     * @param string|null $identification_number Identification number of document used
     *
     * @return $this
     */
    public function setIdentificationNumber($identification_number)
    {
        $this->container['identification_number'] = $identification_number;

        return $this;
    }

    /**
     * Gets identification_type
     *
     * @return string|null
     */
    public function getIdentificationType()
    {
        return $this->container['identification_type'];
    }

    /**
     * Sets identification_type
     *
     * @param string|null $identification_type Document to be identified. The identification type can be one of the following:  - `DL`: Driving License - `PP`: International Passport - `ID`: National ID - `OT`: Other  Please note for Wizall `XOF::Cash` transactions the valid options are: - `ID`: National ID - `PP`: Passport
     *
     * @return $this
     */
    public function setIdentificationType($identification_type)
    {
        $allowedValues = $this->getIdentificationTypeAllowableValues();
        if (!is_null($identification_type) && !in_array($identification_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'identification_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['identification_type'] = $identification_type;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang Determines language of the served content. Defaults to English
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of sender (used only with a Business sender)
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name First name of sender (used only with a Personal sender)
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name Middle name of sender (used only with a Personal sender)
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Last name of sender (used only with a Personal sender)
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime|null $birth_date Date of birth of sender (used only with a Personal sender)
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets occupation
     *
     * @return string|null
     */
    public function getOccupation()
    {
        return $this->container['occupation'];
    }

    /**
     * Sets occupation
     *
     * @param string|null $occupation Occupation of sender (used only with a Personal sender)
     *
     * @return $this
     */
    public function setOccupation($occupation)
    {
        $this->container['occupation'] = $occupation;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality The nationality of the sender (used only with a Personal sender)
     *
     * @return $this
     */
    public function setNationality($nationality)
    {
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets legal_entity_type
     *
     * @return string|null
     */
    public function getLegalEntityType()
    {
        return $this->container['legal_entity_type'];
    }

    /**
     * Sets legal_entity_type
     *
     * @param string|null $legal_entity_type Legal entity type (used only with a Business sender)  Available values:   - sole_proprietorship: Sole Proprietorship   - partnership: Partnership   - privately_owned_company: Privately Owned Company (Limited Company)   - publicly_owned_company: Publicly Listed Company (PLC)   - government_owned_entity: Government Owned Entity Trusts   - trust: Foundations & Similar Entities   - ngo: Non-Government Organisations / Charities inc Religious bodies and place of worship   - club_and_society: Clubs and Societies   - go: GO (Majority Owned Subsidiary of State-Owned Company)   - financial_institution: Financial Institution  Please note not all values are acceptable for some our corridors. Please reach out to our sales teams for more information.  Note that if you select `financial_institution` then the fields `vat_registration_number`, `financial_regulator` and `regulatory_licence_number` will be mandatory as well.
     *
     * @return $this
     */
    public function setLegalEntityType($legal_entity_type)
    {
        $allowedValues = $this->getLegalEntityTypeAllowableValues();
        if (!is_null($legal_entity_type) && !in_array($legal_entity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'legal_entity_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['legal_entity_type'] = $legal_entity_type;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return \DateTime|null
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param \DateTime|null $registration_date The registration date (used only with a Business sender)
     *
     * @return $this
     */
    public function setRegistrationDate($registration_date)
    {
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets registration_number
     *
     * @return string|null
     */
    public function getRegistrationNumber()
    {
        return $this->container['registration_number'];
    }

    /**
     * Sets registration_number
     *
     * @param string|null $registration_number The registration number (used only with a Business sender)
     *
     * @return $this
     */
    public function setRegistrationNumber($registration_number)
    {
        $this->container['registration_number'] = $registration_number;

        return $this;
    }

    /**
     * Gets nature_of_business
     *
     * @return string|null
     */
    public function getNatureOfBusiness()
    {
        return $this->container['nature_of_business'];
    }

    /**
     * Sets nature_of_business
     *
     * @param string|null $nature_of_business Nature of business options (used only with a Business sender)  Available values:   - personal: Personal   - agriculture_and_hunting: Agriculture and Hunting   - forestry: Forestry   - fishing: Fishing   - agricultural_by_products: Agricultural By-Products   - coal_mining: Coal Mining   - oil_mining: Oil Mining   - iron_ore_mining: Iron Ore Mining   - other_metal_and_diamond_mining: Other Metal and Diamond Mining   - other_mineral_mining: Other Mineral Mining   - manufacturing_of_food_drink_tobacco: Manufacture of Food/Drink/Tobacco   - manufacturing_of_textiles_leather_fur_furniture: Manufacture of Textiles/Leather/Fur/Furniture   - manufacture_of_wooden_products_furniture: Manufacture of Wooden Products/Furniture   - manufacture_of_paper_pulp_allied_products: Manufacture of Paper/Pulp/Allied Products   - manufacture_of_chemicals_medical_petroleum_rubber_plastic_products: Manufacture Of Chemicals Medical Petroleum Rubber Plastic Products   - manufacture_of_pottery_china_glass_stone: Manufacture Of Pottery China Glass Stone   - manufacture_of_iron_steel_non_ferrous_metals_basic_industries: Manufacture Of Iron Steel Non-Ferrous Metals Basic Industries   - manufacture_of_metal_products_electrical_and_scientific_engineering: Manufacture Of Metal Products Electrical And Scientific Engineering   - manufacture_of_jewelry_musical_instruments_toys: Manufacture Of Jewelry Musical Instruments Toys   - electricity_gas_and_water: Electricity, Gas And Water   - construction: Construction   - wholesale_trade: Wholesale Trade   - retail_trade: Retail Trade   - catering_incl_hotels: Catering Incl. Hotels   - transport_storage: Transport Storage   - communications: Communications   - finance_and_holding_companies: Finance And Holding Companies   - insurance: Insurance   - business_services: Business Services   - real_estate_development_investment: Real Estate Development Investment   - central_state_governments: Central State Governments   - community_services_defence_police_prisons_etc: Community Services Defence Police Prisons Etc   - social_services_education_health_care: Social Services Education Health Care   - personal_services_leisure_services: Personal Services - Leisure Services   - personal_services_domestic_laundry_repairs: Personal Services - Domestic Laundry Repairs   - personal_services_embassies_international_organisations: Personal Services - Embassies
     *
     * @return $this
     */
    public function setNatureOfBusiness($nature_of_business)
    {
        $allowedValues = $this->getNatureOfBusinessAllowableValues();
        if (!is_null($nature_of_business) && !in_array($nature_of_business, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'nature_of_business', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nature_of_business'] = $nature_of_business;

        return $this;
    }

    /**
     * Gets source_of_funds
     *
     * @return string|null
     */
    public function getSourceOfFunds()
    {
        return $this->container['source_of_funds'];
    }

    /**
     * Sets source_of_funds
     *
     * @param string|null $source_of_funds The source of funds
     *
     * @return $this
     */
    public function setSourceOfFunds($source_of_funds)
    {
        $this->container['source_of_funds'] = $source_of_funds;

        return $this;
    }

    /**
     * Gets custom_source_of_funds
     *
     * @return string|null
     */
    public function getCustomSourceOfFunds()
    {
        return $this->container['custom_source_of_funds'];
    }

    /**
     * Sets custom_source_of_funds
     *
     * @param string|null $custom_source_of_funds Custom source of funds
     *
     * @return $this
     */
    public function setCustomSourceOfFunds($custom_source_of_funds)
    {
        $this->container['custom_source_of_funds'] = $custom_source_of_funds;

        return $this;
    }

    /**
     * Gets core_business_activity
     *
     * @return string|null
     */
    public function getCoreBusinessActivity()
    {
        return $this->container['core_business_activity'];
    }

    /**
     * Sets core_business_activity
     *
     * @param string|null $core_business_activity The core activity (used only with a Business sender)
     *
     * @return $this
     */
    public function setCoreBusinessActivity($core_business_activity)
    {
        $this->container['core_business_activity'] = $core_business_activity;

        return $this;
    }

    /**
     * Gets purpose_of_opening_account
     *
     * @return string|null
     */
    public function getPurposeOfOpeningAccount()
    {
        return $this->container['purpose_of_opening_account'];
    }

    /**
     * Sets purpose_of_opening_account
     *
     * @param string|null $purpose_of_opening_account The purpose for opening their account (used only with a Business sender)
     *
     * @return $this
     */
    public function setPurposeOfOpeningAccount($purpose_of_opening_account)
    {
        $this->container['purpose_of_opening_account'] = $purpose_of_opening_account;

        return $this;
    }

    /**
     * Gets office_phone
     *
     * @return string|null
     */
    public function getOfficePhone()
    {
        return $this->container['office_phone'];
    }

    /**
     * Sets office_phone
     *
     * @param string|null $office_phone The official phone number (used only with a Business sender)
     *
     * @return $this
     */
    public function setOfficePhone($office_phone)
    {
        $this->container['office_phone'] = $office_phone;

        return $this;
    }

    /**
     * Gets vat_registration_number
     *
     * @return string|null
     */
    public function getVatRegistrationNumber()
    {
        return $this->container['vat_registration_number'];
    }

    /**
     * Sets vat_registration_number
     *
     * @param string|null $vat_registration_number The VAT registration number (used only with a Business sender)
     *
     * @return $this
     */
    public function setVatRegistrationNumber($vat_registration_number)
    {
        $this->container['vat_registration_number'] = $vat_registration_number;

        return $this;
    }

    /**
     * Gets financial_regulator
     *
     * @return string|null
     */
    public function getFinancialRegulator()
    {
        return $this->container['financial_regulator'];
    }

    /**
     * Sets financial_regulator
     *
     * @param string|null $financial_regulator The Financial Regulator (used only with a Business sender)
     *
     * @return $this
     */
    public function setFinancialRegulator($financial_regulator)
    {
        $this->container['financial_regulator'] = $financial_regulator;

        return $this;
    }

    /**
     * Gets regulatory_licence_number
     *
     * @return string|null
     */
    public function getRegulatoryLicenceNumber()
    {
        return $this->container['regulatory_licence_number'];
    }

    /**
     * Sets regulatory_licence_number
     *
     * @param string|null $regulatory_licence_number The Regulatory Licence Number (used only with a Business sender)
     *
     * @return $this
     */
    public function setRegulatoryLicenceNumber($regulatory_licence_number)
    {
        $this->container['regulatory_licence_number'] = $regulatory_licence_number;

        return $this;
    }

    /**
     * Gets contact_person_email
     *
     * @return string|null
     */
    public function getContactPersonEmail()
    {
        return $this->container['contact_person_email'];
    }

    /**
     * Sets contact_person_email
     *
     * @param string|null $contact_person_email The contact's email address (used only with a Business sender)
     *
     * @return $this
     */
    public function setContactPersonEmail($contact_person_email)
    {
        $this->container['contact_person_email'] = $contact_person_email;

        return $this;
    }

    /**
     * Gets trading_country
     *
     * @return string|null
     */
    public function getTradingCountry()
    {
        return $this->container['trading_country'];
    }

    /**
     * Sets trading_country
     *
     * @param string|null $trading_country The Business trading country (used only with a Business sender)
     *
     * @return $this
     */
    public function setTradingCountry($trading_country)
    {
        $this->container['trading_country'] = $trading_country;

        return $this;
    }

    /**
     * Gets trading_address
     *
     * @return string|null
     */
    public function getTradingAddress()
    {
        return $this->container['trading_address'];
    }

    /**
     * Sets trading_address
     *
     * @param string|null $trading_address The Business trading address (used only with a Business sender)
     *
     * @return $this
     */
    public function setTradingAddress($trading_address)
    {
        $this->container['trading_address'] = $trading_address;

        return $this;
    }

    /**
     * Gets number_monthly_transactions
     *
     * @return string|null
     */
    public function getNumberMonthlyTransactions()
    {
        return $this->container['number_monthly_transactions'];
    }

    /**
     * Sets number_monthly_transactions
     *
     * @param string|null $number_monthly_transactions The estimated number of monthly transactions (used only with a Business sender)
     *
     * @return $this
     */
    public function setNumberMonthlyTransactions($number_monthly_transactions)
    {
        $this->container['number_monthly_transactions'] = $number_monthly_transactions;

        return $this;
    }

    /**
     * Gets amount_monthly_transactions
     *
     * @return string|null
     */
    public function getAmountMonthlyTransactions()
    {
        return $this->container['amount_monthly_transactions'];
    }

    /**
     * Sets amount_monthly_transactions
     *
     * @param string|null $amount_monthly_transactions The estimated amount for all transactions each month in USD (used only with a Business sender)
     *
     * @return $this
     */
    public function setAmountMonthlyTransactions($amount_monthly_transactions)
    {
        $this->container['amount_monthly_transactions'] = $amount_monthly_transactions;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \TransferZero\Model\Document[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \TransferZero\Model\Document[] $documents Needed for KYC checks. Required to approve the sender unless KYC is waived for your account. Please send us an empty list of documents: `\"documents\": [ ]` in the request if KYC has been waived.  If the documents already exist, please send the Document ID eg. ```JSON \"documents\": [   {     \"id\": \"b6648ba3-1c7b-4f59-8580-684899c84a07\"   } ] ```
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Metadata of sender. You can store any detail specific to your integration here (for example the local ID of the sender on your end). When requesting sender details you will receive the sent metadata back. Also when sending sender related webhooks you will receive the details stored here as well.
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return map[string,\TransferZero\Model\ValidationErrorDescription[]]|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param map[string,\TransferZero\Model\ValidationErrorDescription[]]|null $errors The fields that have some problems and don't pass validation
     *
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets onboarding_status
     *
     * @return string|null
     */
    public function getOnboardingStatus()
    {
        return $this->container['onboarding_status'];
    }

    /**
     * Sets onboarding_status
     *
     * @param string|null $onboarding_status The onboarding status of the sender
     *
     * @return $this
     */
    public function setOnboardingStatus($onboarding_status)
    {
        $this->container['onboarding_status'] = $onboarding_status;

        return $this;
    }

    /**
     * Gets politically_exposed_people
     *
     * @return \TransferZero\Model\PoliticallyExposedPerson[]|null
     */
    public function getPoliticallyExposedPeople()
    {
        return $this->container['politically_exposed_people'];
    }

    /**
     * Sets politically_exposed_people
     *
     * @param \TransferZero\Model\PoliticallyExposedPerson[]|null $politically_exposed_people An optional list of politically exposed people, individuals who are or have been entrusted with prominent public functions by a country, for example heads of state or heads of government, senior politicians, senior government, judicial or military officials, senior executives of state owned corporations, important political party officials.  There is a limit of three (3) politically exposed people per Sender.  Politically exposed person example: ```json   {     \"politically_exposed_person\": {       \"name\": \"Ronald Reagan\",       \"position\": \"President of the United States\",       \"started_date\": \"1981-01-20T00:00:00.000Z\",       \"ended_date\": \"1989-01-20T00:00:00.000Z\",       \"sender_id\": \"344fb668-196d-43db-9d94-b34b7e6c7e0b\"     }   } ```
     *
     * @return $this
     */
    public function setPoliticallyExposedPeople($politically_exposed_people)
    {
        $this->container['politically_exposed_people'] = $politically_exposed_people;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Optional ID that is supplied by partner linking it to the partner's own Sender ID. Note: if present we will validate whether the sent ID is a duplicate in our system or not.
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets city_of_birth
     *
     * @return string|null
     */
    public function getCityOfBirth()
    {
        return $this->container['city_of_birth'];
    }

    /**
     * Sets city_of_birth
     *
     * @param string|null $city_of_birth City of birth of sender
     *
     * @return $this
     */
    public function setCityOfBirth($city_of_birth)
    {
        $this->container['city_of_birth'] = $city_of_birth;

        return $this;
    }

    /**
     * Gets country_of_birth
     *
     * @return string|null
     */
    public function getCountryOfBirth()
    {
        return $this->container['country_of_birth'];
    }

    /**
     * Sets country_of_birth
     *
     * @param string|null $country_of_birth Country of birth of sender in 2-character alpha ISO 3166-2 country format
     *
     * @return $this
     */
    public function setCountryOfBirth($country_of_birth)
    {
        $this->container['country_of_birth'] = $country_of_birth;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The gender of the sender:  - `M`: Male - `F`: Female - `O`: Other
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets sales_lead_id
     *
     * @return string|null
     */
    public function getSalesLeadId()
    {
        return $this->container['sales_lead_id'];
    }

    /**
     * Sets sales_lead_id
     *
     * @param string|null $sales_lead_id Sales Lead ID for tracking (optional)
     *
     * @return $this
     */
    public function setSalesLeadId($sales_lead_id)
    {
        $this->container['sales_lead_id'] = $sales_lead_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Date and time of sender was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}



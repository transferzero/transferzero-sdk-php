<?php
/**
 * Recipient
 *
 * PHP version 5
 *
 * @category Class
 * @package  TransferZero
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TransferZero API
 *
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TransferZero\Model;

use \ArrayAccess;
use \TransferZero\ObjectSerializer;

/**
 * Recipient Class Doc Comment
 *
 * @category Class
 * @description The recipient describes the amount, the currency and the destination where the money should be sent.
 * @package  TransferZero
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Recipient implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Recipient';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'requested_amount' => 'float',
        'requested_currency' => 'string',
        'payout_method' => '\TransferZero\Model\PayoutMethod',
        'metadata' => 'object',
        'created_at' => '\DateTime',
        'editable' => 'bool',
        'input_usd_amount' => 'float',
        'may_cancel' => 'bool',
        'state_reason' => 'string',
        'state' => '\TransferZero\Model\RecipientState',
        'transaction_id' => 'string',
        'transaction_state' => '\TransferZero\Model\TransactionState',
        'exchange_rate' => 'float',
        'fee_fractional' => 'float',
        'input_amount' => 'float',
        'input_currency' => 'string',
        'output_amount' => 'float',
        'output_currency' => 'string',
        'id' => 'string',
        'errors' => 'map[string,\TransferZero\Model\ValidationErrorDescription[]]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'requested_amount' => null,
        'requested_currency' => null,
        'payout_method' => null,
        'metadata' => null,
        'created_at' => 'date-time',
        'editable' => null,
        'input_usd_amount' => null,
        'may_cancel' => null,
        'state_reason' => null,
        'state' => null,
        'transaction_id' => null,
        'transaction_state' => null,
        'exchange_rate' => null,
        'fee_fractional' => null,
        'input_amount' => null,
        'input_currency' => null,
        'output_amount' => null,
        'output_currency' => null,
        'id' => 'uuid',
        'errors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'requested_amount' => 'requested_amount',
        'requested_currency' => 'requested_currency',
        'payout_method' => 'payout_method',
        'metadata' => 'metadata',
        'created_at' => 'created_at',
        'editable' => 'editable',
        'input_usd_amount' => 'input_usd_amount',
        'may_cancel' => 'may_cancel',
        'state_reason' => 'state_reason',
        'state' => 'state',
        'transaction_id' => 'transaction_id',
        'transaction_state' => 'transaction_state',
        'exchange_rate' => 'exchange_rate',
        'fee_fractional' => 'fee_fractional',
        'input_amount' => 'input_amount',
        'input_currency' => 'input_currency',
        'output_amount' => 'output_amount',
        'output_currency' => 'output_currency',
        'id' => 'id',
        'errors' => 'errors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'requested_amount' => 'setRequestedAmount',
        'requested_currency' => 'setRequestedCurrency',
        'payout_method' => 'setPayoutMethod',
        'metadata' => 'setMetadata',
        'created_at' => 'setCreatedAt',
        'editable' => 'setEditable',
        'input_usd_amount' => 'setInputUsdAmount',
        'may_cancel' => 'setMayCancel',
        'state_reason' => 'setStateReason',
        'state' => 'setState',
        'transaction_id' => 'setTransactionId',
        'transaction_state' => 'setTransactionState',
        'exchange_rate' => 'setExchangeRate',
        'fee_fractional' => 'setFeeFractional',
        'input_amount' => 'setInputAmount',
        'input_currency' => 'setInputCurrency',
        'output_amount' => 'setOutputAmount',
        'output_currency' => 'setOutputCurrency',
        'id' => 'setId',
        'errors' => 'setErrors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'requested_amount' => 'getRequestedAmount',
        'requested_currency' => 'getRequestedCurrency',
        'payout_method' => 'getPayoutMethod',
        'metadata' => 'getMetadata',
        'created_at' => 'getCreatedAt',
        'editable' => 'getEditable',
        'input_usd_amount' => 'getInputUsdAmount',
        'may_cancel' => 'getMayCancel',
        'state_reason' => 'getStateReason',
        'state' => 'getState',
        'transaction_id' => 'getTransactionId',
        'transaction_state' => 'getTransactionState',
        'exchange_rate' => 'getExchangeRate',
        'fee_fractional' => 'getFeeFractional',
        'input_amount' => 'getInputAmount',
        'input_currency' => 'getInputCurrency',
        'output_amount' => 'getOutputAmount',
        'output_currency' => 'getOutputCurrency',
        'id' => 'getId',
        'errors' => 'getErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['requested_amount'] = isset($data['requested_amount']) ? $data['requested_amount'] : null;
        $this->container['requested_currency'] = isset($data['requested_currency']) ? $data['requested_currency'] : null;
        $this->container['payout_method'] = isset($data['payout_method']) ? $data['payout_method'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['editable'] = isset($data['editable']) ? $data['editable'] : null;
        $this->container['input_usd_amount'] = isset($data['input_usd_amount']) ? $data['input_usd_amount'] : null;
        $this->container['may_cancel'] = isset($data['may_cancel']) ? $data['may_cancel'] : null;
        $this->container['state_reason'] = isset($data['state_reason']) ? $data['state_reason'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['transaction_state'] = isset($data['transaction_state']) ? $data['transaction_state'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['fee_fractional'] = isset($data['fee_fractional']) ? $data['fee_fractional'] : null;
        $this->container['input_amount'] = isset($data['input_amount']) ? $data['input_amount'] : null;
        $this->container['input_currency'] = isset($data['input_currency']) ? $data['input_currency'] : null;
        $this->container['output_amount'] = isset($data['output_amount']) ? $data['output_amount'] : null;
        $this->container['output_currency'] = isset($data['output_currency']) ? $data['output_currency'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['requested_amount'] === null) {
            $invalidProperties[] = "'requested_amount' can't be null";
        }
        if ($this->container['requested_currency'] === null) {
            $invalidProperties[] = "'requested_currency' can't be null";
        }
        if ($this->container['payout_method'] === null) {
            $invalidProperties[] = "'payout_method' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets requested_amount
     *
     * @return float
     */
    public function getRequestedAmount()
    {
        return $this->container['requested_amount'];
    }

    /**
     * Sets requested_amount
     *
     * @param float $requested_amount the amount that should be paid to the recipient. This can be in any currency, usually either the input or the output currency. If the value here is not the output currency we will calculate how much the recipient is going to get using the exchange rates active when the transaction was created.
     *
     * @return $this
     */
    public function setRequestedAmount($requested_amount)
    {
        $this->container['requested_amount'] = $requested_amount;

        return $this;
    }

    /**
     * Gets requested_currency
     *
     * @return string
     */
    public function getRequestedCurrency()
    {
        return $this->container['requested_currency'];
    }

    /**
     * Sets requested_currency
     *
     * @param string $requested_currency the currency of the amount in 3-character alpha ISO 4217 currency format
     *
     * @return $this
     */
    public function setRequestedCurrency($requested_currency)
    {
        $this->container['requested_currency'] = $requested_currency;

        return $this;
    }

    /**
     * Gets payout_method
     *
     * @return \TransferZero\Model\PayoutMethod
     */
    public function getPayoutMethod()
    {
        return $this->container['payout_method'];
    }

    /**
     * Sets payout_method
     *
     * @param \TransferZero\Model\PayoutMethod $payout_method payout_method
     *
     * @return $this
     */
    public function setPayoutMethod($payout_method)
    {
        $this->container['payout_method'] = $payout_method;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Additional metadata that can be added to a recipient. These values will be returned on request
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Date and time that the recipient was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool|null
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool|null $editable Shows whether the recipient can be edited using the PATCH /v1/recipients/{id} endpoint or not
     *
     * @return $this
     */
    public function setEditable($editable)
    {
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets input_usd_amount
     *
     * @return float|null
     */
    public function getInputUsdAmount()
    {
        return $this->container['input_usd_amount'];
    }

    /**
     * Sets input_usd_amount
     *
     * @param float|null $input_usd_amount Shows how much this payment is worth in USD
     *
     * @return $this
     */
    public function setInputUsdAmount($input_usd_amount)
    {
        $this->container['input_usd_amount'] = $input_usd_amount;

        return $this;
    }

    /**
     * Gets may_cancel
     *
     * @return bool|null
     */
    public function getMayCancel()
    {
        return $this->container['may_cancel'];
    }

    /**
     * Sets may_cancel
     *
     * @param bool|null $may_cancel Shows whether the payment can be cancelled using the DELETE /v1/recipients/{id} endpoint or not. The payment can not be cancelled if the payout is pending.
     *
     * @return $this
     */
    public function setMayCancel($may_cancel)
    {
        $this->container['may_cancel'] = $may_cancel;

        return $this;
    }

    /**
     * Gets state_reason
     *
     * @return string|null
     */
    public function getStateReason()
    {
        return $this->container['state_reason'];
    }

    /**
     * Sets state_reason
     *
     * @param string|null $state_reason In case the payment is unsuccessful it holds the error message associated with the last unsuccessful payout.
     *
     * @return $this
     */
    public function setStateReason($state_reason)
    {
        $this->container['state_reason'] = $state_reason;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \TransferZero\Model\RecipientState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \TransferZero\Model\RecipientState|null $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id The ID of the transaction that is related to this recipient
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets transaction_state
     *
     * @return \TransferZero\Model\TransactionState|null
     */
    public function getTransactionState()
    {
        return $this->container['transaction_state'];
    }

    /**
     * Sets transaction_state
     *
     * @param \TransferZero\Model\TransactionState|null $transaction_state transaction_state
     *
     * @return $this
     */
    public function setTransactionState($transaction_state)
    {
        $this->container['transaction_state'] = $transaction_state;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return float|null
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param float|null $exchange_rate The exchange rate used in this payment
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets fee_fractional
     *
     * @return float|null
     */
    public function getFeeFractional()
    {
        return $this->container['fee_fractional'];
    }

    /**
     * Sets fee_fractional
     *
     * @param float|null $fee_fractional The fee for this payment in fractional units (for example cents for USD transactions)
     *
     * @return $this
     */
    public function setFeeFractional($fee_fractional)
    {
        $this->container['fee_fractional'] = $fee_fractional;

        return $this;
    }

    /**
     * Gets input_amount
     *
     * @return float|null
     */
    public function getInputAmount()
    {
        return $this->container['input_amount'];
    }

    /**
     * Sets input_amount
     *
     * @param float|null $input_amount The amount that had to be paid in for this payment to proceed
     *
     * @return $this
     */
    public function setInputAmount($input_amount)
    {
        $this->container['input_amount'] = $input_amount;

        return $this;
    }

    /**
     * Gets input_currency
     *
     * @return string|null
     */
    public function getInputCurrency()
    {
        return $this->container['input_currency'];
    }

    /**
     * Sets input_currency
     *
     * @param string|null $input_currency The currency this payment was paid in
     *
     * @return $this
     */
    public function setInputCurrency($input_currency)
    {
        $this->container['input_currency'] = $input_currency;

        return $this;
    }

    /**
     * Gets output_amount
     *
     * @return float|null
     */
    public function getOutputAmount()
    {
        return $this->container['output_amount'];
    }

    /**
     * Sets output_amount
     *
     * @param float|null $output_amount The amount that will be paid to the recipient
     *
     * @return $this
     */
    public function setOutputAmount($output_amount)
    {
        $this->container['output_amount'] = $output_amount;

        return $this;
    }

    /**
     * Gets output_currency
     *
     * @return string|null
     */
    public function getOutputCurrency()
    {
        return $this->container['output_currency'];
    }

    /**
     * Sets output_currency
     *
     * @param string|null $output_currency The currency the payment will be delivered in
     *
     * @return $this
     */
    public function setOutputCurrency($output_currency)
    {
        $this->container['output_currency'] = $output_currency;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return map[string,\TransferZero\Model\ValidationErrorDescription[]]|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param map[string,\TransferZero\Model\ValidationErrorDescription[]]|null $errors The fields that have some problems and don't pass validation
     *
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


